/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchFailedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchFailedEvent{}

// BatchFailedEvent struct for BatchFailedEvent
type BatchFailedEvent struct {
	Id *string `json:"id,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// NewBatchFailedEvent instantiates a new BatchFailedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchFailedEvent() *BatchFailedEvent {
	this := BatchFailedEvent{}
	return &this
}

// NewBatchFailedEventWithDefaults instantiates a new BatchFailedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchFailedEventWithDefaults() *BatchFailedEvent {
	this := BatchFailedEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BatchFailedEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchFailedEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BatchFailedEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BatchFailedEvent) SetId(v string) {
	o.Id = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *BatchFailedEvent) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchFailedEvent) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *BatchFailedEvent) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *BatchFailedEvent) SetReason(v string) {
	o.Reason = &v
}

func (o BatchFailedEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchFailedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableBatchFailedEvent struct {
	value *BatchFailedEvent
	isSet bool
}

func (v NullableBatchFailedEvent) Get() *BatchFailedEvent {
	return v.value
}

func (v *NullableBatchFailedEvent) Set(val *BatchFailedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchFailedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchFailedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchFailedEvent(val *BatchFailedEvent) *NullableBatchFailedEvent {
	return &NullableBatchFailedEvent{value: val, isSet: true}
}

func (v NullableBatchFailedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchFailedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


