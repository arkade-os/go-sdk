/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Bip322Signature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bip322Signature{}

// Bip322Signature struct for Bip322Signature
type Bip322Signature struct {
		Message *string `json:"message,omitempty"`
		Signature *string `json:"signature,omitempty"`
}

// NewBip322Signature instantiates a new Bip322Signature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBip322Signature() *Bip322Signature {
	this := Bip322Signature{}
	return &this
}

// NewBip322SignatureWithDefaults instantiates a new Bip322Signature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBip322SignatureWithDefaults() *Bip322Signature {
	this := Bip322Signature{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Bip322Signature) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bip322Signature) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Bip322Signature) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Bip322Signature) SetMessage(v string) {
	o.Message = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *Bip322Signature) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bip322Signature) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *Bip322Signature) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *Bip322Signature) SetSignature(v string) {
	o.Signature = &v
}

func (o Bip322Signature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bip322Signature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	return toSerialize, nil
}

type NullableBip322Signature struct {
	value *Bip322Signature
	isSet bool
}

func (v NullableBip322Signature) Get() *Bip322Signature {
	return v.value
}

func (v *NullableBip322Signature) Set(val *Bip322Signature) {
	v.value = val
	v.isSet = true
}

func (v NullableBip322Signature) IsSet() bool {
	return v.isSet
}

func (v *NullableBip322Signature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBip322Signature(val *Bip322Signature) *NullableBip322Signature {
	return &NullableBip322Signature{value: val, isSet: true}
}

func (v NullableBip322Signature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBip322Signature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


