/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubmitTreeNoncesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitTreeNoncesRequest{}

// SubmitTreeNoncesRequest struct for SubmitTreeNoncesRequest
type SubmitTreeNoncesRequest struct {
	BatchId *string `json:"batchId,omitempty"`
	Pubkey *string `json:"pubkey,omitempty"`
	TreeNonces *string `json:"treeNonces,omitempty"`
}

// NewSubmitTreeNoncesRequest instantiates a new SubmitTreeNoncesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitTreeNoncesRequest() *SubmitTreeNoncesRequest {
	this := SubmitTreeNoncesRequest{}
	return &this
}

// NewSubmitTreeNoncesRequestWithDefaults instantiates a new SubmitTreeNoncesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitTreeNoncesRequestWithDefaults() *SubmitTreeNoncesRequest {
	this := SubmitTreeNoncesRequest{}
	return &this
}

// GetBatchId returns the BatchId field value if set, zero value otherwise.
func (o *SubmitTreeNoncesRequest) GetBatchId() string {
	if o == nil || IsNil(o.BatchId) {
		var ret string
		return ret
	}
	return *o.BatchId
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitTreeNoncesRequest) GetBatchIdOk() (*string, bool) {
	if o == nil || IsNil(o.BatchId) {
		return nil, false
	}
	return o.BatchId, true
}

// HasBatchId returns a boolean if a field has been set.
func (o *SubmitTreeNoncesRequest) HasBatchId() bool {
	if o != nil && !IsNil(o.BatchId) {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given string and assigns it to the BatchId field.
func (o *SubmitTreeNoncesRequest) SetBatchId(v string) {
	o.BatchId = &v
}

// GetPubkey returns the Pubkey field value if set, zero value otherwise.
func (o *SubmitTreeNoncesRequest) GetPubkey() string {
	if o == nil || IsNil(o.Pubkey) {
		var ret string
		return ret
	}
	return *o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitTreeNoncesRequest) GetPubkeyOk() (*string, bool) {
	if o == nil || IsNil(o.Pubkey) {
		return nil, false
	}
	return o.Pubkey, true
}

// HasPubkey returns a boolean if a field has been set.
func (o *SubmitTreeNoncesRequest) HasPubkey() bool {
	if o != nil && !IsNil(o.Pubkey) {
		return true
	}

	return false
}

// SetPubkey gets a reference to the given string and assigns it to the Pubkey field.
func (o *SubmitTreeNoncesRequest) SetPubkey(v string) {
	o.Pubkey = &v
}

// GetTreeNonces returns the TreeNonces field value if set, zero value otherwise.
func (o *SubmitTreeNoncesRequest) GetTreeNonces() string {
	if o == nil || IsNil(o.TreeNonces) {
		var ret string
		return ret
	}
	return *o.TreeNonces
}

// GetTreeNoncesOk returns a tuple with the TreeNonces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitTreeNoncesRequest) GetTreeNoncesOk() (*string, bool) {
	if o == nil || IsNil(o.TreeNonces) {
		return nil, false
	}
	return o.TreeNonces, true
}

// HasTreeNonces returns a boolean if a field has been set.
func (o *SubmitTreeNoncesRequest) HasTreeNonces() bool {
	if o != nil && !IsNil(o.TreeNonces) {
		return true
	}

	return false
}

// SetTreeNonces gets a reference to the given string and assigns it to the TreeNonces field.
func (o *SubmitTreeNoncesRequest) SetTreeNonces(v string) {
	o.TreeNonces = &v
}

func (o SubmitTreeNoncesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitTreeNoncesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchId) {
		toSerialize["batchId"] = o.BatchId
	}
	if !IsNil(o.Pubkey) {
		toSerialize["pubkey"] = o.Pubkey
	}
	if !IsNil(o.TreeNonces) {
		toSerialize["treeNonces"] = o.TreeNonces
	}
	return toSerialize, nil
}

type NullableSubmitTreeNoncesRequest struct {
	value *SubmitTreeNoncesRequest
	isSet bool
}

func (v NullableSubmitTreeNoncesRequest) Get() *SubmitTreeNoncesRequest {
	return v.value
}

func (v *NullableSubmitTreeNoncesRequest) Set(val *SubmitTreeNoncesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitTreeNoncesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitTreeNoncesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitTreeNoncesRequest(val *SubmitTreeNoncesRequest) *NullableSubmitTreeNoncesRequest {
	return &NullableSubmitTreeNoncesRequest{value: val, isSet: true}
}

func (v NullableSubmitTreeNoncesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitTreeNoncesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


