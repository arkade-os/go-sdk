/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TreeNoncesEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TreeNoncesEvent{}

// TreeNoncesEvent struct for TreeNoncesEvent
type TreeNoncesEvent struct {
		Id *string `json:"id,omitempty"`
	// pubkey -> musig2 public nonce
		Nonces map[string]string `json:"nonces,omitempty"`
		Topic []string `json:"topic,omitempty"`
		Txid *string `json:"txid,omitempty"`
}

// NewTreeNoncesEvent instantiates a new TreeNoncesEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreeNoncesEvent() *TreeNoncesEvent {
	this := TreeNoncesEvent{}
	return &this
}

// NewTreeNoncesEventWithDefaults instantiates a new TreeNoncesEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeNoncesEventWithDefaults() *TreeNoncesEvent {
	this := TreeNoncesEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TreeNoncesEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeNoncesEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TreeNoncesEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TreeNoncesEvent) SetId(v string) {
	o.Id = &v
}

// GetNonces returns the Nonces field value if set, zero value otherwise.
func (o *TreeNoncesEvent) GetNonces() map[string]string {
	if o == nil || IsNil(o.Nonces) {
		var ret map[string]string
		return ret
	}
	return o.Nonces
}

// GetNoncesOk returns a tuple with the Nonces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeNoncesEvent) GetNoncesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Nonces) {
		return map[string]string{}, false
	}
	return o.Nonces, true
}

// HasNonces returns a boolean if a field has been set.
func (o *TreeNoncesEvent) HasNonces() bool {
	if o != nil && !IsNil(o.Nonces) {
		return true
	}

	return false
}

// SetNonces gets a reference to the given map[string]string and assigns it to the Nonces field.
func (o *TreeNoncesEvent) SetNonces(v map[string]string) {
	o.Nonces = v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *TreeNoncesEvent) GetTopic() []string {
	if o == nil || IsNil(o.Topic) {
		var ret []string
		return ret
	}
	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeNoncesEvent) GetTopicOk() ([]string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *TreeNoncesEvent) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given []string and assigns it to the Topic field.
func (o *TreeNoncesEvent) SetTopic(v []string) {
	o.Topic = v
}

// GetTxid returns the Txid field value if set, zero value otherwise.
func (o *TreeNoncesEvent) GetTxid() string {
	if o == nil || IsNil(o.Txid) {
		var ret string
		return ret
	}
	return *o.Txid
}

// GetTxidOk returns a tuple with the Txid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeNoncesEvent) GetTxidOk() (*string, bool) {
	if o == nil || IsNil(o.Txid) {
		return nil, false
	}
	return o.Txid, true
}

// HasTxid returns a boolean if a field has been set.
func (o *TreeNoncesEvent) HasTxid() bool {
	if o != nil && !IsNil(o.Txid) {
		return true
	}

	return false
}

// SetTxid gets a reference to the given string and assigns it to the Txid field.
func (o *TreeNoncesEvent) SetTxid(v string) {
	o.Txid = &v
}

func (o TreeNoncesEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TreeNoncesEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Nonces) {
		toSerialize["nonces"] = o.Nonces
	}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.Txid) {
		toSerialize["txid"] = o.Txid
	}
	return toSerialize, nil
}

type NullableTreeNoncesEvent struct {
	value *TreeNoncesEvent
	isSet bool
}

func (v NullableTreeNoncesEvent) Get() *TreeNoncesEvent {
	return v.value
}

func (v *NullableTreeNoncesEvent) Set(val *TreeNoncesEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeNoncesEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeNoncesEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeNoncesEvent(val *TreeNoncesEvent) *NullableTreeNoncesEvent {
	return &NullableTreeNoncesEvent{value: val, isSet: true}
}

func (v NullableTreeNoncesEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeNoncesEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


