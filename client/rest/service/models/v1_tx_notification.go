// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1TxNotification v1 tx notification
//
// swagger:model v1TxNotification
type V1TxNotification struct {

	// This field is set only in case of offchain tx.
	//
	// key: outpoint, value: checkpoint txid
	CheckpointTxs map[string]V1TxData `json:"checkpointTxs,omitempty"`

	// spendable vtxos
	SpendableVtxos []*V1Vtxo `json:"spendableVtxos"`

	// spent vtxos
	SpentVtxos []*V1Vtxo `json:"spentVtxos"`

	// tx
	Tx string `json:"tx,omitempty"`

	// txid
	Txid string `json:"txid,omitempty"`
}

// Validate validates this v1 tx notification
func (m *V1TxNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckpointTxs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpendableVtxos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpentVtxos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TxNotification) validateCheckpointTxs(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckpointTxs) { // not required
		return nil
	}

	for k := range m.CheckpointTxs {

		if err := validate.Required("checkpointTxs"+"."+k, "body", m.CheckpointTxs[k]); err != nil {
			return err
		}
		if val, ok := m.CheckpointTxs[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checkpointTxs" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checkpointTxs" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1TxNotification) validateSpendableVtxos(formats strfmt.Registry) error {
	if swag.IsZero(m.SpendableVtxos) { // not required
		return nil
	}

	for i := 0; i < len(m.SpendableVtxos); i++ {
		if swag.IsZero(m.SpendableVtxos[i]) { // not required
			continue
		}

		if m.SpendableVtxos[i] != nil {
			if err := m.SpendableVtxos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spendableVtxos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("spendableVtxos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1TxNotification) validateSpentVtxos(formats strfmt.Registry) error {
	if swag.IsZero(m.SpentVtxos) { // not required
		return nil
	}

	for i := 0; i < len(m.SpentVtxos); i++ {
		if swag.IsZero(m.SpentVtxos[i]) { // not required
			continue
		}

		if m.SpentVtxos[i] != nil {
			if err := m.SpentVtxos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spentVtxos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("spentVtxos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 tx notification based on the context it is used
func (m *V1TxNotification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCheckpointTxs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpendableVtxos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpentVtxos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TxNotification) contextValidateCheckpointTxs(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.CheckpointTxs {

		if val, ok := m.CheckpointTxs[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *V1TxNotification) contextValidateSpendableVtxos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SpendableVtxos); i++ {

		if m.SpendableVtxos[i] != nil {

			if swag.IsZero(m.SpendableVtxos[i]) { // not required
				return nil
			}

			if err := m.SpendableVtxos[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spendableVtxos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("spendableVtxos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1TxNotification) contextValidateSpentVtxos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SpentVtxos); i++ {

		if m.SpentVtxos[i] != nil {

			if swag.IsZero(m.SpentVtxos[i]) { // not required
				return nil
			}

			if err := m.SpentVtxos[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spentVtxos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("spentVtxos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TxNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TxNotification) UnmarshalBinary(b []byte) error {
	var res V1TxNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
