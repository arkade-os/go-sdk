/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchFinalizationEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchFinalizationEvent{}

// BatchFinalizationEvent struct for BatchFinalizationEvent
type BatchFinalizationEvent struct {
	CommitmentTx *string `json:"commitmentTx,omitempty"`
	Id *string `json:"id,omitempty"`
}

// NewBatchFinalizationEvent instantiates a new BatchFinalizationEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchFinalizationEvent() *BatchFinalizationEvent {
	this := BatchFinalizationEvent{}
	return &this
}

// NewBatchFinalizationEventWithDefaults instantiates a new BatchFinalizationEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchFinalizationEventWithDefaults() *BatchFinalizationEvent {
	this := BatchFinalizationEvent{}
	return &this
}

// GetCommitmentTx returns the CommitmentTx field value if set, zero value otherwise.
func (o *BatchFinalizationEvent) GetCommitmentTx() string {
	if o == nil || IsNil(o.CommitmentTx) {
		var ret string
		return ret
	}
	return *o.CommitmentTx
}

// GetCommitmentTxOk returns a tuple with the CommitmentTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchFinalizationEvent) GetCommitmentTxOk() (*string, bool) {
	if o == nil || IsNil(o.CommitmentTx) {
		return nil, false
	}
	return o.CommitmentTx, true
}

// HasCommitmentTx returns a boolean if a field has been set.
func (o *BatchFinalizationEvent) HasCommitmentTx() bool {
	if o != nil && !IsNil(o.CommitmentTx) {
		return true
	}

	return false
}

// SetCommitmentTx gets a reference to the given string and assigns it to the CommitmentTx field.
func (o *BatchFinalizationEvent) SetCommitmentTx(v string) {
	o.CommitmentTx = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BatchFinalizationEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchFinalizationEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BatchFinalizationEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BatchFinalizationEvent) SetId(v string) {
	o.Id = &v
}

func (o BatchFinalizationEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchFinalizationEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommitmentTx) {
		toSerialize["commitmentTx"] = o.CommitmentTx
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableBatchFinalizationEvent struct {
	value *BatchFinalizationEvent
	isSet bool
}

func (v NullableBatchFinalizationEvent) Get() *BatchFinalizationEvent {
	return v.value
}

func (v *NullableBatchFinalizationEvent) Set(val *BatchFinalizationEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchFinalizationEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchFinalizationEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchFinalizationEvent(val *BatchFinalizationEvent) *NullableBatchFinalizationEvent {
	return &NullableBatchFinalizationEvent{value: val, isSet: true}
}

func (v NullableBatchFinalizationEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchFinalizationEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


