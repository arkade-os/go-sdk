/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TreeTxEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TreeTxEvent{}

// TreeTxEvent struct for TreeTxEvent
type TreeTxEvent struct {
	BatchIndex *int32 `json:"batchIndex,omitempty"`
	// output index -> child txid
	Children map[string]string `json:"children,omitempty"`
	Id *string `json:"id,omitempty"`
	Topic []string `json:"topic,omitempty"`
	Tx *string `json:"tx,omitempty"`
	Txid *string `json:"txid,omitempty"`
}

// NewTreeTxEvent instantiates a new TreeTxEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreeTxEvent() *TreeTxEvent {
	this := TreeTxEvent{}
	return &this
}

// NewTreeTxEventWithDefaults instantiates a new TreeTxEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeTxEventWithDefaults() *TreeTxEvent {
	this := TreeTxEvent{}
	return &this
}

// GetBatchIndex returns the BatchIndex field value if set, zero value otherwise.
func (o *TreeTxEvent) GetBatchIndex() int32 {
	if o == nil || IsNil(o.BatchIndex) {
		var ret int32
		return ret
	}
	return *o.BatchIndex
}

// GetBatchIndexOk returns a tuple with the BatchIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeTxEvent) GetBatchIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.BatchIndex) {
		return nil, false
	}
	return o.BatchIndex, true
}

// HasBatchIndex returns a boolean if a field has been set.
func (o *TreeTxEvent) HasBatchIndex() bool {
	if o != nil && !IsNil(o.BatchIndex) {
		return true
	}

	return false
}

// SetBatchIndex gets a reference to the given int32 and assigns it to the BatchIndex field.
func (o *TreeTxEvent) SetBatchIndex(v int32) {
	o.BatchIndex = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *TreeTxEvent) GetChildren() map[string]string {
	if o == nil || IsNil(o.Children) {
		var ret map[string]string
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeTxEvent) GetChildrenOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Children) {
		return map[string]string{}, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *TreeTxEvent) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given map[string]string and assigns it to the Children field.
func (o *TreeTxEvent) SetChildren(v map[string]string) {
	o.Children = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TreeTxEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeTxEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TreeTxEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TreeTxEvent) SetId(v string) {
	o.Id = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *TreeTxEvent) GetTopic() []string {
	if o == nil || IsNil(o.Topic) {
		var ret []string
		return ret
	}
	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeTxEvent) GetTopicOk() ([]string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *TreeTxEvent) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given []string and assigns it to the Topic field.
func (o *TreeTxEvent) SetTopic(v []string) {
	o.Topic = v
}

// GetTx returns the Tx field value if set, zero value otherwise.
func (o *TreeTxEvent) GetTx() string {
	if o == nil || IsNil(o.Tx) {
		var ret string
		return ret
	}
	return *o.Tx
}

// GetTxOk returns a tuple with the Tx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeTxEvent) GetTxOk() (*string, bool) {
	if o == nil || IsNil(o.Tx) {
		return nil, false
	}
	return o.Tx, true
}

// HasTx returns a boolean if a field has been set.
func (o *TreeTxEvent) HasTx() bool {
	if o != nil && !IsNil(o.Tx) {
		return true
	}

	return false
}

// SetTx gets a reference to the given string and assigns it to the Tx field.
func (o *TreeTxEvent) SetTx(v string) {
	o.Tx = &v
}

// GetTxid returns the Txid field value if set, zero value otherwise.
func (o *TreeTxEvent) GetTxid() string {
	if o == nil || IsNil(o.Txid) {
		var ret string
		return ret
	}
	return *o.Txid
}

// GetTxidOk returns a tuple with the Txid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeTxEvent) GetTxidOk() (*string, bool) {
	if o == nil || IsNil(o.Txid) {
		return nil, false
	}
	return o.Txid, true
}

// HasTxid returns a boolean if a field has been set.
func (o *TreeTxEvent) HasTxid() bool {
	if o != nil && !IsNil(o.Txid) {
		return true
	}

	return false
}

// SetTxid gets a reference to the given string and assigns it to the Txid field.
func (o *TreeTxEvent) SetTxid(v string) {
	o.Txid = &v
}

func (o TreeTxEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TreeTxEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchIndex) {
		toSerialize["batchIndex"] = o.BatchIndex
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.Tx) {
		toSerialize["tx"] = o.Tx
	}
	if !IsNil(o.Txid) {
		toSerialize["txid"] = o.Txid
	}
	return toSerialize, nil
}

type NullableTreeTxEvent struct {
	value *TreeTxEvent
	isSet bool
}

func (v NullableTreeTxEvent) Get() *TreeTxEvent {
	return v.value
}

func (v *NullableTreeTxEvent) Set(val *TreeTxEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeTxEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeTxEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeTxEvent(val *TreeTxEvent) *NullableTreeTxEvent {
	return &NullableTreeTxEvent{value: val, isSet: true}
}

func (v NullableTreeTxEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeTxEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


