/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetEventStreamResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEventStreamResponse{}

// GetEventStreamResponse struct for GetEventStreamResponse
type GetEventStreamResponse struct {
		BatchFailed *BatchFailedEvent `json:"batchFailed,omitempty"`
		BatchFinalization *BatchFinalizationEvent `json:"batchFinalization,omitempty"`
		BatchFinalized *BatchFinalizedEvent `json:"batchFinalized,omitempty"`
		BatchStarted *BatchStartedEvent `json:"batchStarted,omitempty"`
		Heartbeat map[string]interface{} `json:"heartbeat,omitempty"`
		TreeNonces *TreeNoncesEvent `json:"treeNonces,omitempty"`
		TreeNoncesAggregated *TreeNoncesAggregatedEvent `json:"treeNoncesAggregated,omitempty"`
		TreeSignature *TreeSignatureEvent `json:"treeSignature,omitempty"`
		TreeSigningStarted *TreeSigningStartedEvent `json:"treeSigningStarted,omitempty"`
		TreeTx *TreeTxEvent `json:"treeTx,omitempty"`
}

// NewGetEventStreamResponse instantiates a new GetEventStreamResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEventStreamResponse() *GetEventStreamResponse {
	this := GetEventStreamResponse{}
	return &this
}

// NewGetEventStreamResponseWithDefaults instantiates a new GetEventStreamResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEventStreamResponseWithDefaults() *GetEventStreamResponse {
	this := GetEventStreamResponse{}
	return &this
}

// GetBatchFailed returns the BatchFailed field value if set, zero value otherwise.
func (o *GetEventStreamResponse) GetBatchFailed() BatchFailedEvent {
	if o == nil || IsNil(o.BatchFailed) {
		var ret BatchFailedEvent
		return ret
	}
	return *o.BatchFailed
}

// GetBatchFailedOk returns a tuple with the BatchFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventStreamResponse) GetBatchFailedOk() (*BatchFailedEvent, bool) {
	if o == nil || IsNil(o.BatchFailed) {
		return nil, false
	}
	return o.BatchFailed, true
}

// HasBatchFailed returns a boolean if a field has been set.
func (o *GetEventStreamResponse) HasBatchFailed() bool {
	if o != nil && !IsNil(o.BatchFailed) {
		return true
	}

	return false
}

// SetBatchFailed gets a reference to the given BatchFailedEvent and assigns it to the BatchFailed field.
func (o *GetEventStreamResponse) SetBatchFailed(v BatchFailedEvent) {
	o.BatchFailed = &v
}

// GetBatchFinalization returns the BatchFinalization field value if set, zero value otherwise.
func (o *GetEventStreamResponse) GetBatchFinalization() BatchFinalizationEvent {
	if o == nil || IsNil(o.BatchFinalization) {
		var ret BatchFinalizationEvent
		return ret
	}
	return *o.BatchFinalization
}

// GetBatchFinalizationOk returns a tuple with the BatchFinalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventStreamResponse) GetBatchFinalizationOk() (*BatchFinalizationEvent, bool) {
	if o == nil || IsNil(o.BatchFinalization) {
		return nil, false
	}
	return o.BatchFinalization, true
}

// HasBatchFinalization returns a boolean if a field has been set.
func (o *GetEventStreamResponse) HasBatchFinalization() bool {
	if o != nil && !IsNil(o.BatchFinalization) {
		return true
	}

	return false
}

// SetBatchFinalization gets a reference to the given BatchFinalizationEvent and assigns it to the BatchFinalization field.
func (o *GetEventStreamResponse) SetBatchFinalization(v BatchFinalizationEvent) {
	o.BatchFinalization = &v
}

// GetBatchFinalized returns the BatchFinalized field value if set, zero value otherwise.
func (o *GetEventStreamResponse) GetBatchFinalized() BatchFinalizedEvent {
	if o == nil || IsNil(o.BatchFinalized) {
		var ret BatchFinalizedEvent
		return ret
	}
	return *o.BatchFinalized
}

// GetBatchFinalizedOk returns a tuple with the BatchFinalized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventStreamResponse) GetBatchFinalizedOk() (*BatchFinalizedEvent, bool) {
	if o == nil || IsNil(o.BatchFinalized) {
		return nil, false
	}
	return o.BatchFinalized, true
}

// HasBatchFinalized returns a boolean if a field has been set.
func (o *GetEventStreamResponse) HasBatchFinalized() bool {
	if o != nil && !IsNil(o.BatchFinalized) {
		return true
	}

	return false
}

// SetBatchFinalized gets a reference to the given BatchFinalizedEvent and assigns it to the BatchFinalized field.
func (o *GetEventStreamResponse) SetBatchFinalized(v BatchFinalizedEvent) {
	o.BatchFinalized = &v
}

// GetBatchStarted returns the BatchStarted field value if set, zero value otherwise.
func (o *GetEventStreamResponse) GetBatchStarted() BatchStartedEvent {
	if o == nil || IsNil(o.BatchStarted) {
		var ret BatchStartedEvent
		return ret
	}
	return *o.BatchStarted
}

// GetBatchStartedOk returns a tuple with the BatchStarted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventStreamResponse) GetBatchStartedOk() (*BatchStartedEvent, bool) {
	if o == nil || IsNil(o.BatchStarted) {
		return nil, false
	}
	return o.BatchStarted, true
}

// HasBatchStarted returns a boolean if a field has been set.
func (o *GetEventStreamResponse) HasBatchStarted() bool {
	if o != nil && !IsNil(o.BatchStarted) {
		return true
	}

	return false
}

// SetBatchStarted gets a reference to the given BatchStartedEvent and assigns it to the BatchStarted field.
func (o *GetEventStreamResponse) SetBatchStarted(v BatchStartedEvent) {
	o.BatchStarted = &v
}

// GetHeartbeat returns the Heartbeat field value if set, zero value otherwise.
func (o *GetEventStreamResponse) GetHeartbeat() map[string]interface{} {
	if o == nil || IsNil(o.Heartbeat) {
		var ret map[string]interface{}
		return ret
	}
	return o.Heartbeat
}

// GetHeartbeatOk returns a tuple with the Heartbeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventStreamResponse) GetHeartbeatOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Heartbeat) {
		return map[string]interface{}{}, false
	}
	return o.Heartbeat, true
}

// HasHeartbeat returns a boolean if a field has been set.
func (o *GetEventStreamResponse) HasHeartbeat() bool {
	if o != nil && !IsNil(o.Heartbeat) {
		return true
	}

	return false
}

// SetHeartbeat gets a reference to the given map[string]interface{} and assigns it to the Heartbeat field.
func (o *GetEventStreamResponse) SetHeartbeat(v map[string]interface{}) {
	o.Heartbeat = v
}

// GetTreeNonces returns the TreeNonces field value if set, zero value otherwise.
func (o *GetEventStreamResponse) GetTreeNonces() TreeNoncesEvent {
	if o == nil || IsNil(o.TreeNonces) {
		var ret TreeNoncesEvent
		return ret
	}
	return *o.TreeNonces
}

// GetTreeNoncesOk returns a tuple with the TreeNonces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventStreamResponse) GetTreeNoncesOk() (*TreeNoncesEvent, bool) {
	if o == nil || IsNil(o.TreeNonces) {
		return nil, false
	}
	return o.TreeNonces, true
}

// HasTreeNonces returns a boolean if a field has been set.
func (o *GetEventStreamResponse) HasTreeNonces() bool {
	if o != nil && !IsNil(o.TreeNonces) {
		return true
	}

	return false
}

// SetTreeNonces gets a reference to the given TreeNoncesEvent and assigns it to the TreeNonces field.
func (o *GetEventStreamResponse) SetTreeNonces(v TreeNoncesEvent) {
	o.TreeNonces = &v
}

// GetTreeNoncesAggregated returns the TreeNoncesAggregated field value if set, zero value otherwise.
func (o *GetEventStreamResponse) GetTreeNoncesAggregated() TreeNoncesAggregatedEvent {
	if o == nil || IsNil(o.TreeNoncesAggregated) {
		var ret TreeNoncesAggregatedEvent
		return ret
	}
	return *o.TreeNoncesAggregated
}

// GetTreeNoncesAggregatedOk returns a tuple with the TreeNoncesAggregated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventStreamResponse) GetTreeNoncesAggregatedOk() (*TreeNoncesAggregatedEvent, bool) {
	if o == nil || IsNil(o.TreeNoncesAggregated) {
		return nil, false
	}
	return o.TreeNoncesAggregated, true
}

// HasTreeNoncesAggregated returns a boolean if a field has been set.
func (o *GetEventStreamResponse) HasTreeNoncesAggregated() bool {
	if o != nil && !IsNil(o.TreeNoncesAggregated) {
		return true
	}

	return false
}

// SetTreeNoncesAggregated gets a reference to the given TreeNoncesAggregatedEvent and assigns it to the TreeNoncesAggregated field.
func (o *GetEventStreamResponse) SetTreeNoncesAggregated(v TreeNoncesAggregatedEvent) {
	o.TreeNoncesAggregated = &v
}

// GetTreeSignature returns the TreeSignature field value if set, zero value otherwise.
func (o *GetEventStreamResponse) GetTreeSignature() TreeSignatureEvent {
	if o == nil || IsNil(o.TreeSignature) {
		var ret TreeSignatureEvent
		return ret
	}
	return *o.TreeSignature
}

// GetTreeSignatureOk returns a tuple with the TreeSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventStreamResponse) GetTreeSignatureOk() (*TreeSignatureEvent, bool) {
	if o == nil || IsNil(o.TreeSignature) {
		return nil, false
	}
	return o.TreeSignature, true
}

// HasTreeSignature returns a boolean if a field has been set.
func (o *GetEventStreamResponse) HasTreeSignature() bool {
	if o != nil && !IsNil(o.TreeSignature) {
		return true
	}

	return false
}

// SetTreeSignature gets a reference to the given TreeSignatureEvent and assigns it to the TreeSignature field.
func (o *GetEventStreamResponse) SetTreeSignature(v TreeSignatureEvent) {
	o.TreeSignature = &v
}

// GetTreeSigningStarted returns the TreeSigningStarted field value if set, zero value otherwise.
func (o *GetEventStreamResponse) GetTreeSigningStarted() TreeSigningStartedEvent {
	if o == nil || IsNil(o.TreeSigningStarted) {
		var ret TreeSigningStartedEvent
		return ret
	}
	return *o.TreeSigningStarted
}

// GetTreeSigningStartedOk returns a tuple with the TreeSigningStarted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventStreamResponse) GetTreeSigningStartedOk() (*TreeSigningStartedEvent, bool) {
	if o == nil || IsNil(o.TreeSigningStarted) {
		return nil, false
	}
	return o.TreeSigningStarted, true
}

// HasTreeSigningStarted returns a boolean if a field has been set.
func (o *GetEventStreamResponse) HasTreeSigningStarted() bool {
	if o != nil && !IsNil(o.TreeSigningStarted) {
		return true
	}

	return false
}

// SetTreeSigningStarted gets a reference to the given TreeSigningStartedEvent and assigns it to the TreeSigningStarted field.
func (o *GetEventStreamResponse) SetTreeSigningStarted(v TreeSigningStartedEvent) {
	o.TreeSigningStarted = &v
}

// GetTreeTx returns the TreeTx field value if set, zero value otherwise.
func (o *GetEventStreamResponse) GetTreeTx() TreeTxEvent {
	if o == nil || IsNil(o.TreeTx) {
		var ret TreeTxEvent
		return ret
	}
	return *o.TreeTx
}

// GetTreeTxOk returns a tuple with the TreeTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventStreamResponse) GetTreeTxOk() (*TreeTxEvent, bool) {
	if o == nil || IsNil(o.TreeTx) {
		return nil, false
	}
	return o.TreeTx, true
}

// HasTreeTx returns a boolean if a field has been set.
func (o *GetEventStreamResponse) HasTreeTx() bool {
	if o != nil && !IsNil(o.TreeTx) {
		return true
	}

	return false
}

// SetTreeTx gets a reference to the given TreeTxEvent and assigns it to the TreeTx field.
func (o *GetEventStreamResponse) SetTreeTx(v TreeTxEvent) {
	o.TreeTx = &v
}

func (o GetEventStreamResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEventStreamResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchFailed) {
		toSerialize["batchFailed"] = o.BatchFailed
	}
	if !IsNil(o.BatchFinalization) {
		toSerialize["batchFinalization"] = o.BatchFinalization
	}
	if !IsNil(o.BatchFinalized) {
		toSerialize["batchFinalized"] = o.BatchFinalized
	}
	if !IsNil(o.BatchStarted) {
		toSerialize["batchStarted"] = o.BatchStarted
	}
	if !IsNil(o.Heartbeat) {
		toSerialize["heartbeat"] = o.Heartbeat
	}
	if !IsNil(o.TreeNonces) {
		toSerialize["treeNonces"] = o.TreeNonces
	}
	if !IsNil(o.TreeNoncesAggregated) {
		toSerialize["treeNoncesAggregated"] = o.TreeNoncesAggregated
	}
	if !IsNil(o.TreeSignature) {
		toSerialize["treeSignature"] = o.TreeSignature
	}
	if !IsNil(o.TreeSigningStarted) {
		toSerialize["treeSigningStarted"] = o.TreeSigningStarted
	}
	if !IsNil(o.TreeTx) {
		toSerialize["treeTx"] = o.TreeTx
	}
	return toSerialize, nil
}

type NullableGetEventStreamResponse struct {
	value *GetEventStreamResponse
	isSet bool
}

func (v NullableGetEventStreamResponse) Get() *GetEventStreamResponse {
	return v.value
}

func (v *NullableGetEventStreamResponse) Set(val *GetEventStreamResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEventStreamResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEventStreamResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEventStreamResponse(val *GetEventStreamResponse) *NullableGetEventStreamResponse {
	return &NullableGetEventStreamResponse{value: val, isSet: true}
}

func (v NullableGetEventStreamResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEventStreamResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


