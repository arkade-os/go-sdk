/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchFinalizedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchFinalizedEvent{}

// BatchFinalizedEvent struct for BatchFinalizedEvent
type BatchFinalizedEvent struct {
	CommitmentTxid *string `json:"commitmentTxid,omitempty"`
	Id *string `json:"id,omitempty"`
}

// NewBatchFinalizedEvent instantiates a new BatchFinalizedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchFinalizedEvent() *BatchFinalizedEvent {
	this := BatchFinalizedEvent{}
	return &this
}

// NewBatchFinalizedEventWithDefaults instantiates a new BatchFinalizedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchFinalizedEventWithDefaults() *BatchFinalizedEvent {
	this := BatchFinalizedEvent{}
	return &this
}

// GetCommitmentTxid returns the CommitmentTxid field value if set, zero value otherwise.
func (o *BatchFinalizedEvent) GetCommitmentTxid() string {
	if o == nil || IsNil(o.CommitmentTxid) {
		var ret string
		return ret
	}
	return *o.CommitmentTxid
}

// GetCommitmentTxidOk returns a tuple with the CommitmentTxid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchFinalizedEvent) GetCommitmentTxidOk() (*string, bool) {
	if o == nil || IsNil(o.CommitmentTxid) {
		return nil, false
	}
	return o.CommitmentTxid, true
}

// HasCommitmentTxid returns a boolean if a field has been set.
func (o *BatchFinalizedEvent) HasCommitmentTxid() bool {
	if o != nil && !IsNil(o.CommitmentTxid) {
		return true
	}

	return false
}

// SetCommitmentTxid gets a reference to the given string and assigns it to the CommitmentTxid field.
func (o *BatchFinalizedEvent) SetCommitmentTxid(v string) {
	o.CommitmentTxid = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BatchFinalizedEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchFinalizedEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BatchFinalizedEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BatchFinalizedEvent) SetId(v string) {
	o.Id = &v
}

func (o BatchFinalizedEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchFinalizedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommitmentTxid) {
		toSerialize["commitmentTxid"] = o.CommitmentTxid
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableBatchFinalizedEvent struct {
	value *BatchFinalizedEvent
	isSet bool
}

func (v NullableBatchFinalizedEvent) Get() *BatchFinalizedEvent {
	return v.value
}

func (v *NullableBatchFinalizedEvent) Set(val *BatchFinalizedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchFinalizedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchFinalizedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchFinalizedEvent(val *BatchFinalizedEvent) *NullableBatchFinalizedEvent {
	return &NullableBatchFinalizedEvent{value: val, isSet: true}
}

func (v NullableBatchFinalizedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchFinalizedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


