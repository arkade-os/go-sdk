/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchStartedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchStartedEvent{}

// BatchStartedEvent struct for BatchStartedEvent
type BatchStartedEvent struct {
		BatchExpiry *int64 `json:"batchExpiry,omitempty"`
		Id *string `json:"id,omitempty"`
		IntentIdHashes []string `json:"intentIdHashes,omitempty"`
}

// NewBatchStartedEvent instantiates a new BatchStartedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchStartedEvent() *BatchStartedEvent {
	this := BatchStartedEvent{}
	return &this
}

// NewBatchStartedEventWithDefaults instantiates a new BatchStartedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchStartedEventWithDefaults() *BatchStartedEvent {
	this := BatchStartedEvent{}
	return &this
}

// GetBatchExpiry returns the BatchExpiry field value if set, zero value otherwise.
func (o *BatchStartedEvent) GetBatchExpiry() int64 {
	if o == nil || IsNil(o.BatchExpiry) {
		var ret int64
		return ret
	}
	return *o.BatchExpiry
}

// GetBatchExpiryOk returns a tuple with the BatchExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchStartedEvent) GetBatchExpiryOk() (*int64, bool) {
	if o == nil || IsNil(o.BatchExpiry) {
		return nil, false
	}
	return o.BatchExpiry, true
}

// HasBatchExpiry returns a boolean if a field has been set.
func (o *BatchStartedEvent) HasBatchExpiry() bool {
	if o != nil && !IsNil(o.BatchExpiry) {
		return true
	}

	return false
}

// SetBatchExpiry gets a reference to the given int64 and assigns it to the BatchExpiry field.
func (o *BatchStartedEvent) SetBatchExpiry(v int64) {
	o.BatchExpiry = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BatchStartedEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchStartedEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BatchStartedEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BatchStartedEvent) SetId(v string) {
	o.Id = &v
}

// GetIntentIdHashes returns the IntentIdHashes field value if set, zero value otherwise.
func (o *BatchStartedEvent) GetIntentIdHashes() []string {
	if o == nil || IsNil(o.IntentIdHashes) {
		var ret []string
		return ret
	}
	return o.IntentIdHashes
}

// GetIntentIdHashesOk returns a tuple with the IntentIdHashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchStartedEvent) GetIntentIdHashesOk() ([]string, bool) {
	if o == nil || IsNil(o.IntentIdHashes) {
		return nil, false
	}
	return o.IntentIdHashes, true
}

// HasIntentIdHashes returns a boolean if a field has been set.
func (o *BatchStartedEvent) HasIntentIdHashes() bool {
	if o != nil && !IsNil(o.IntentIdHashes) {
		return true
	}

	return false
}

// SetIntentIdHashes gets a reference to the given []string and assigns it to the IntentIdHashes field.
func (o *BatchStartedEvent) SetIntentIdHashes(v []string) {
	o.IntentIdHashes = v
}

func (o BatchStartedEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchStartedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchExpiry) {
		toSerialize["batchExpiry"] = o.BatchExpiry
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IntentIdHashes) {
		toSerialize["intentIdHashes"] = o.IntentIdHashes
	}
	return toSerialize, nil
}

type NullableBatchStartedEvent struct {
	value *BatchStartedEvent
	isSet bool
}

func (v NullableBatchStartedEvent) Get() *BatchStartedEvent {
	return v.value
}

func (v *NullableBatchStartedEvent) Set(val *BatchStartedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchStartedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchStartedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchStartedEvent(val *BatchStartedEvent) *NullableBatchStartedEvent {
	return &NullableBatchStartedEvent{value: val, isSet: true}
}

func (v NullableBatchStartedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchStartedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


