/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MarketHour type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketHour{}

// MarketHour struct for MarketHour
type MarketHour struct {
	NextEndTime *int64 `json:"nextEndTime,omitempty"`
	NextStartTime *int64 `json:"nextStartTime,omitempty"`
	Period *int64 `json:"period,omitempty"`
	RoundInterval *int64 `json:"roundInterval,omitempty"`
}

// NewMarketHour instantiates a new MarketHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketHour() *MarketHour {
	this := MarketHour{}
	return &this
}

// NewMarketHourWithDefaults instantiates a new MarketHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketHourWithDefaults() *MarketHour {
	this := MarketHour{}
	return &this
}

// GetNextEndTime returns the NextEndTime field value if set, zero value otherwise.
func (o *MarketHour) GetNextEndTime() int64 {
	if o == nil || IsNil(o.NextEndTime) {
		var ret int64
		return ret
	}
	return *o.NextEndTime
}

// GetNextEndTimeOk returns a tuple with the NextEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHour) GetNextEndTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.NextEndTime) {
		return nil, false
	}
	return o.NextEndTime, true
}

// HasNextEndTime returns a boolean if a field has been set.
func (o *MarketHour) HasNextEndTime() bool {
	if o != nil && !IsNil(o.NextEndTime) {
		return true
	}

	return false
}

// SetNextEndTime gets a reference to the given int64 and assigns it to the NextEndTime field.
func (o *MarketHour) SetNextEndTime(v int64) {
	o.NextEndTime = &v
}

// GetNextStartTime returns the NextStartTime field value if set, zero value otherwise.
func (o *MarketHour) GetNextStartTime() int64 {
	if o == nil || IsNil(o.NextStartTime) {
		var ret int64
		return ret
	}
	return *o.NextStartTime
}

// GetNextStartTimeOk returns a tuple with the NextStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHour) GetNextStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.NextStartTime) {
		return nil, false
	}
	return o.NextStartTime, true
}

// HasNextStartTime returns a boolean if a field has been set.
func (o *MarketHour) HasNextStartTime() bool {
	if o != nil && !IsNil(o.NextStartTime) {
		return true
	}

	return false
}

// SetNextStartTime gets a reference to the given int64 and assigns it to the NextStartTime field.
func (o *MarketHour) SetNextStartTime(v int64) {
	o.NextStartTime = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *MarketHour) GetPeriod() int64 {
	if o == nil || IsNil(o.Period) {
		var ret int64
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHour) GetPeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *MarketHour) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given int64 and assigns it to the Period field.
func (o *MarketHour) SetPeriod(v int64) {
	o.Period = &v
}

// GetRoundInterval returns the RoundInterval field value if set, zero value otherwise.
func (o *MarketHour) GetRoundInterval() int64 {
	if o == nil || IsNil(o.RoundInterval) {
		var ret int64
		return ret
	}
	return *o.RoundInterval
}

// GetRoundIntervalOk returns a tuple with the RoundInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHour) GetRoundIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.RoundInterval) {
		return nil, false
	}
	return o.RoundInterval, true
}

// HasRoundInterval returns a boolean if a field has been set.
func (o *MarketHour) HasRoundInterval() bool {
	if o != nil && !IsNil(o.RoundInterval) {
		return true
	}

	return false
}

// SetRoundInterval gets a reference to the given int64 and assigns it to the RoundInterval field.
func (o *MarketHour) SetRoundInterval(v int64) {
	o.RoundInterval = &v
}

func (o MarketHour) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketHour) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextEndTime) {
		toSerialize["nextEndTime"] = o.NextEndTime
	}
	if !IsNil(o.NextStartTime) {
		toSerialize["nextStartTime"] = o.NextStartTime
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.RoundInterval) {
		toSerialize["roundInterval"] = o.RoundInterval
	}
	return toSerialize, nil
}

type NullableMarketHour struct {
	value *MarketHour
	isSet bool
}

func (v NullableMarketHour) Get() *MarketHour {
	return v.value
}

func (v *NullableMarketHour) Set(val *MarketHour) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketHour) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketHour(val *MarketHour) *NullableMarketHour {
	return &NullableMarketHour{value: val, isSet: true}
}

func (v NullableMarketHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


