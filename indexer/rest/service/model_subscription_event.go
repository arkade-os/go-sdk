/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubscriptionEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionEvent{}

// SubscriptionEvent struct for SubscriptionEvent
type SubscriptionEvent struct {
		CheckpointTxs map[string]TxData `json:"checkpointTxs,omitempty"`
		NewVtxos []Vtxo `json:"newVtxos,omitempty"`
		Scripts []string `json:"scripts,omitempty"`
		SpentVtxos []Vtxo `json:"spentVtxos,omitempty"`
		SweptVtxos []Vtxo `json:"sweptVtxos,omitempty"`
		Tx *string `json:"tx,omitempty"`
		Txid *string `json:"txid,omitempty"`
}

// NewSubscriptionEvent instantiates a new SubscriptionEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionEvent() *SubscriptionEvent {
	this := SubscriptionEvent{}
	return &this
}

// NewSubscriptionEventWithDefaults instantiates a new SubscriptionEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionEventWithDefaults() *SubscriptionEvent {
	this := SubscriptionEvent{}
	return &this
}

// GetCheckpointTxs returns the CheckpointTxs field value if set, zero value otherwise.
func (o *SubscriptionEvent) GetCheckpointTxs() map[string]TxData {
	if o == nil || IsNil(o.CheckpointTxs) {
		var ret map[string]TxData
		return ret
	}
	return o.CheckpointTxs
}

// GetCheckpointTxsOk returns a tuple with the CheckpointTxs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionEvent) GetCheckpointTxsOk() (map[string]TxData, bool) {
	if o == nil || IsNil(o.CheckpointTxs) {
		return map[string]TxData{}, false
	}
	return o.CheckpointTxs, true
}

// HasCheckpointTxs returns a boolean if a field has been set.
func (o *SubscriptionEvent) HasCheckpointTxs() bool {
	if o != nil && !IsNil(o.CheckpointTxs) {
		return true
	}

	return false
}

// SetCheckpointTxs gets a reference to the given map[string]TxData and assigns it to the CheckpointTxs field.
func (o *SubscriptionEvent) SetCheckpointTxs(v map[string]TxData) {
	o.CheckpointTxs = v
}

// GetNewVtxos returns the NewVtxos field value if set, zero value otherwise.
func (o *SubscriptionEvent) GetNewVtxos() []Vtxo {
	if o == nil || IsNil(o.NewVtxos) {
		var ret []Vtxo
		return ret
	}
	return o.NewVtxos
}

// GetNewVtxosOk returns a tuple with the NewVtxos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionEvent) GetNewVtxosOk() ([]Vtxo, bool) {
	if o == nil || IsNil(o.NewVtxos) {
		return nil, false
	}
	return o.NewVtxos, true
}

// HasNewVtxos returns a boolean if a field has been set.
func (o *SubscriptionEvent) HasNewVtxos() bool {
	if o != nil && !IsNil(o.NewVtxos) {
		return true
	}

	return false
}

// SetNewVtxos gets a reference to the given []Vtxo and assigns it to the NewVtxos field.
func (o *SubscriptionEvent) SetNewVtxos(v []Vtxo) {
	o.NewVtxos = v
}

// GetScripts returns the Scripts field value if set, zero value otherwise.
func (o *SubscriptionEvent) GetScripts() []string {
	if o == nil || IsNil(o.Scripts) {
		var ret []string
		return ret
	}
	return o.Scripts
}

// GetScriptsOk returns a tuple with the Scripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionEvent) GetScriptsOk() ([]string, bool) {
	if o == nil || IsNil(o.Scripts) {
		return nil, false
	}
	return o.Scripts, true
}

// HasScripts returns a boolean if a field has been set.
func (o *SubscriptionEvent) HasScripts() bool {
	if o != nil && !IsNil(o.Scripts) {
		return true
	}

	return false
}

// SetScripts gets a reference to the given []string and assigns it to the Scripts field.
func (o *SubscriptionEvent) SetScripts(v []string) {
	o.Scripts = v
}

// GetSpentVtxos returns the SpentVtxos field value if set, zero value otherwise.
func (o *SubscriptionEvent) GetSpentVtxos() []Vtxo {
	if o == nil || IsNil(o.SpentVtxos) {
		var ret []Vtxo
		return ret
	}
	return o.SpentVtxos
}

// GetSpentVtxosOk returns a tuple with the SpentVtxos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionEvent) GetSpentVtxosOk() ([]Vtxo, bool) {
	if o == nil || IsNil(o.SpentVtxos) {
		return nil, false
	}
	return o.SpentVtxos, true
}

// HasSpentVtxos returns a boolean if a field has been set.
func (o *SubscriptionEvent) HasSpentVtxos() bool {
	if o != nil && !IsNil(o.SpentVtxos) {
		return true
	}

	return false
}

// SetSpentVtxos gets a reference to the given []Vtxo and assigns it to the SpentVtxos field.
func (o *SubscriptionEvent) SetSpentVtxos(v []Vtxo) {
	o.SpentVtxos = v
}

// GetSweptVtxos returns the SweptVtxos field value if set, zero value otherwise.
func (o *SubscriptionEvent) GetSweptVtxos() []Vtxo {
	if o == nil || IsNil(o.SweptVtxos) {
		var ret []Vtxo
		return ret
	}
	return o.SweptVtxos
}

// GetSweptVtxosOk returns a tuple with the SweptVtxos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionEvent) GetSweptVtxosOk() ([]Vtxo, bool) {
	if o == nil || IsNil(o.SweptVtxos) {
		return nil, false
	}
	return o.SweptVtxos, true
}

// HasSweptVtxos returns a boolean if a field has been set.
func (o *SubscriptionEvent) HasSweptVtxos() bool {
	if o != nil && !IsNil(o.SweptVtxos) {
		return true
	}

	return false
}

// SetSweptVtxos gets a reference to the given []Vtxo and assigns it to the SweptVtxos field.
func (o *SubscriptionEvent) SetSweptVtxos(v []Vtxo) {
	o.SweptVtxos = v
}

// GetTx returns the Tx field value if set, zero value otherwise.
func (o *SubscriptionEvent) GetTx() string {
	if o == nil || IsNil(o.Tx) {
		var ret string
		return ret
	}
	return *o.Tx
}

// GetTxOk returns a tuple with the Tx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionEvent) GetTxOk() (*string, bool) {
	if o == nil || IsNil(o.Tx) {
		return nil, false
	}
	return o.Tx, true
}

// HasTx returns a boolean if a field has been set.
func (o *SubscriptionEvent) HasTx() bool {
	if o != nil && !IsNil(o.Tx) {
		return true
	}

	return false
}

// SetTx gets a reference to the given string and assigns it to the Tx field.
func (o *SubscriptionEvent) SetTx(v string) {
	o.Tx = &v
}

// GetTxid returns the Txid field value if set, zero value otherwise.
func (o *SubscriptionEvent) GetTxid() string {
	if o == nil || IsNil(o.Txid) {
		var ret string
		return ret
	}
	return *o.Txid
}

// GetTxidOk returns a tuple with the Txid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionEvent) GetTxidOk() (*string, bool) {
	if o == nil || IsNil(o.Txid) {
		return nil, false
	}
	return o.Txid, true
}

// HasTxid returns a boolean if a field has been set.
func (o *SubscriptionEvent) HasTxid() bool {
	if o != nil && !IsNil(o.Txid) {
		return true
	}

	return false
}

// SetTxid gets a reference to the given string and assigns it to the Txid field.
func (o *SubscriptionEvent) SetTxid(v string) {
	o.Txid = &v
}

func (o SubscriptionEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckpointTxs) {
		toSerialize["checkpointTxs"] = o.CheckpointTxs
	}
	if !IsNil(o.NewVtxos) {
		toSerialize["newVtxos"] = o.NewVtxos
	}
	if !IsNil(o.Scripts) {
		toSerialize["scripts"] = o.Scripts
	}
	if !IsNil(o.SpentVtxos) {
		toSerialize["spentVtxos"] = o.SpentVtxos
	}
	if !IsNil(o.SweptVtxos) {
		toSerialize["sweptVtxos"] = o.SweptVtxos
	}
	if !IsNil(o.Tx) {
		toSerialize["tx"] = o.Tx
	}
	if !IsNil(o.Txid) {
		toSerialize["txid"] = o.Txid
	}
	return toSerialize, nil
}

type NullableSubscriptionEvent struct {
	value *SubscriptionEvent
	isSet bool
}

func (v NullableSubscriptionEvent) Get() *SubscriptionEvent {
	return v.value
}

func (v *NullableSubscriptionEvent) Set(val *SubscriptionEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionEvent(val *SubscriptionEvent) *NullableSubscriptionEvent {
	return &NullableSubscriptionEvent{value: val, isSet: true}
}

func (v NullableSubscriptionEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


