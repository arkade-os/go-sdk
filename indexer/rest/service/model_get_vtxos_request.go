/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetVtxosRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetVtxosRequest{}

// GetVtxosRequest struct for GetVtxosRequest
type GetVtxosRequest struct {
	// Or specify a list of vtxo outpoints. The 2 filters are mutually exclusive.
		Outpoints []string `json:"outpoints,omitempty"`
		Page *IndexerPageRequest `json:"page,omitempty"`
	// Retrieve only recoverable vtxos (notes, subdust or swept vtxos). The 3 filters are mutually exclusive,
		RecoverableOnly *bool `json:"recoverableOnly,omitempty"`
	// Either specify a list of vtxo scripts.
		Scripts []string `json:"scripts,omitempty"`
	// Retrieve only spendable vtxos
		SpendableOnly *bool `json:"spendableOnly,omitempty"`
	// Retrieve only spent vtxos.
		SpentOnly *bool `json:"spentOnly,omitempty"`
}

// NewGetVtxosRequest instantiates a new GetVtxosRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetVtxosRequest() *GetVtxosRequest {
	this := GetVtxosRequest{}
	return &this
}

// NewGetVtxosRequestWithDefaults instantiates a new GetVtxosRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetVtxosRequestWithDefaults() *GetVtxosRequest {
	this := GetVtxosRequest{}
	return &this
}

// GetOutpoints returns the Outpoints field value if set, zero value otherwise.
func (o *GetVtxosRequest) GetOutpoints() []string {
	if o == nil || IsNil(o.Outpoints) {
		var ret []string
		return ret
	}
	return o.Outpoints
}

// GetOutpointsOk returns a tuple with the Outpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVtxosRequest) GetOutpointsOk() ([]string, bool) {
	if o == nil || IsNil(o.Outpoints) {
		return nil, false
	}
	return o.Outpoints, true
}

// HasOutpoints returns a boolean if a field has been set.
func (o *GetVtxosRequest) HasOutpoints() bool {
	if o != nil && !IsNil(o.Outpoints) {
		return true
	}

	return false
}

// SetOutpoints gets a reference to the given []string and assigns it to the Outpoints field.
func (o *GetVtxosRequest) SetOutpoints(v []string) {
	o.Outpoints = v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *GetVtxosRequest) GetPage() IndexerPageRequest {
	if o == nil || IsNil(o.Page) {
		var ret IndexerPageRequest
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVtxosRequest) GetPageOk() (*IndexerPageRequest, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *GetVtxosRequest) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given IndexerPageRequest and assigns it to the Page field.
func (o *GetVtxosRequest) SetPage(v IndexerPageRequest) {
	o.Page = &v
}

// GetRecoverableOnly returns the RecoverableOnly field value if set, zero value otherwise.
func (o *GetVtxosRequest) GetRecoverableOnly() bool {
	if o == nil || IsNil(o.RecoverableOnly) {
		var ret bool
		return ret
	}
	return *o.RecoverableOnly
}

// GetRecoverableOnlyOk returns a tuple with the RecoverableOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVtxosRequest) GetRecoverableOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.RecoverableOnly) {
		return nil, false
	}
	return o.RecoverableOnly, true
}

// HasRecoverableOnly returns a boolean if a field has been set.
func (o *GetVtxosRequest) HasRecoverableOnly() bool {
	if o != nil && !IsNil(o.RecoverableOnly) {
		return true
	}

	return false
}

// SetRecoverableOnly gets a reference to the given bool and assigns it to the RecoverableOnly field.
func (o *GetVtxosRequest) SetRecoverableOnly(v bool) {
	o.RecoverableOnly = &v
}

// GetScripts returns the Scripts field value if set, zero value otherwise.
func (o *GetVtxosRequest) GetScripts() []string {
	if o == nil || IsNil(o.Scripts) {
		var ret []string
		return ret
	}
	return o.Scripts
}

// GetScriptsOk returns a tuple with the Scripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVtxosRequest) GetScriptsOk() ([]string, bool) {
	if o == nil || IsNil(o.Scripts) {
		return nil, false
	}
	return o.Scripts, true
}

// HasScripts returns a boolean if a field has been set.
func (o *GetVtxosRequest) HasScripts() bool {
	if o != nil && !IsNil(o.Scripts) {
		return true
	}

	return false
}

// SetScripts gets a reference to the given []string and assigns it to the Scripts field.
func (o *GetVtxosRequest) SetScripts(v []string) {
	o.Scripts = v
}

// GetSpendableOnly returns the SpendableOnly field value if set, zero value otherwise.
func (o *GetVtxosRequest) GetSpendableOnly() bool {
	if o == nil || IsNil(o.SpendableOnly) {
		var ret bool
		return ret
	}
	return *o.SpendableOnly
}

// GetSpendableOnlyOk returns a tuple with the SpendableOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVtxosRequest) GetSpendableOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.SpendableOnly) {
		return nil, false
	}
	return o.SpendableOnly, true
}

// HasSpendableOnly returns a boolean if a field has been set.
func (o *GetVtxosRequest) HasSpendableOnly() bool {
	if o != nil && !IsNil(o.SpendableOnly) {
		return true
	}

	return false
}

// SetSpendableOnly gets a reference to the given bool and assigns it to the SpendableOnly field.
func (o *GetVtxosRequest) SetSpendableOnly(v bool) {
	o.SpendableOnly = &v
}

// GetSpentOnly returns the SpentOnly field value if set, zero value otherwise.
func (o *GetVtxosRequest) GetSpentOnly() bool {
	if o == nil || IsNil(o.SpentOnly) {
		var ret bool
		return ret
	}
	return *o.SpentOnly
}

// GetSpentOnlyOk returns a tuple with the SpentOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVtxosRequest) GetSpentOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.SpentOnly) {
		return nil, false
	}
	return o.SpentOnly, true
}

// HasSpentOnly returns a boolean if a field has been set.
func (o *GetVtxosRequest) HasSpentOnly() bool {
	if o != nil && !IsNil(o.SpentOnly) {
		return true
	}

	return false
}

// SetSpentOnly gets a reference to the given bool and assigns it to the SpentOnly field.
func (o *GetVtxosRequest) SetSpentOnly(v bool) {
	o.SpentOnly = &v
}

func (o GetVtxosRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetVtxosRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Outpoints) {
		toSerialize["outpoints"] = o.Outpoints
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.RecoverableOnly) {
		toSerialize["recoverableOnly"] = o.RecoverableOnly
	}
	if !IsNil(o.Scripts) {
		toSerialize["scripts"] = o.Scripts
	}
	if !IsNil(o.SpendableOnly) {
		toSerialize["spendableOnly"] = o.SpendableOnly
	}
	if !IsNil(o.SpentOnly) {
		toSerialize["spentOnly"] = o.SpentOnly
	}
	return toSerialize, nil
}

type NullableGetVtxosRequest struct {
	value *GetVtxosRequest
	isSet bool
}

func (v NullableGetVtxosRequest) Get() *GetVtxosRequest {
	return v.value
}

func (v *NullableGetVtxosRequest) Set(val *GetVtxosRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVtxosRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVtxosRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVtxosRequest(val *GetVtxosRequest) *NullableGetVtxosRequest {
	return &NullableGetVtxosRequest{value: val, isSet: true}
}

func (v NullableGetVtxosRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVtxosRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


