/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IndexerTxHistoryRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexerTxHistoryRecord{}

// IndexerTxHistoryRecord struct for IndexerTxHistoryRecord
type IndexerTxHistoryRecord struct {
		Amount *int32 `json:"amount,omitempty"`
		CommitmentTxid *string `json:"commitmentTxid,omitempty"`
		CreatedAt *int64 `json:"createdAt,omitempty"`
		IsSettled *bool `json:"isSettled,omitempty"`
		SettledBy *string `json:"settledBy,omitempty"`
		Type *IndexerTxType `json:"type,omitempty"`
		VirtualTxid *string `json:"virtualTxid,omitempty"`
}

// NewIndexerTxHistoryRecord instantiates a new IndexerTxHistoryRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexerTxHistoryRecord() *IndexerTxHistoryRecord {
	this := IndexerTxHistoryRecord{}
	var type_ IndexerTxType = INDEXER_TX_TYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// NewIndexerTxHistoryRecordWithDefaults instantiates a new IndexerTxHistoryRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexerTxHistoryRecordWithDefaults() *IndexerTxHistoryRecord {
	this := IndexerTxHistoryRecord{}
	var type_ IndexerTxType = INDEXER_TX_TYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *IndexerTxHistoryRecord) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerTxHistoryRecord) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *IndexerTxHistoryRecord) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *IndexerTxHistoryRecord) SetAmount(v int32) {
	o.Amount = &v
}

// GetCommitmentTxid returns the CommitmentTxid field value if set, zero value otherwise.
func (o *IndexerTxHistoryRecord) GetCommitmentTxid() string {
	if o == nil || IsNil(o.CommitmentTxid) {
		var ret string
		return ret
	}
	return *o.CommitmentTxid
}

// GetCommitmentTxidOk returns a tuple with the CommitmentTxid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerTxHistoryRecord) GetCommitmentTxidOk() (*string, bool) {
	if o == nil || IsNil(o.CommitmentTxid) {
		return nil, false
	}
	return o.CommitmentTxid, true
}

// HasCommitmentTxid returns a boolean if a field has been set.
func (o *IndexerTxHistoryRecord) HasCommitmentTxid() bool {
	if o != nil && !IsNil(o.CommitmentTxid) {
		return true
	}

	return false
}

// SetCommitmentTxid gets a reference to the given string and assigns it to the CommitmentTxid field.
func (o *IndexerTxHistoryRecord) SetCommitmentTxid(v string) {
	o.CommitmentTxid = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IndexerTxHistoryRecord) GetCreatedAt() int64 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerTxHistoryRecord) GetCreatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IndexerTxHistoryRecord) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *IndexerTxHistoryRecord) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetIsSettled returns the IsSettled field value if set, zero value otherwise.
func (o *IndexerTxHistoryRecord) GetIsSettled() bool {
	if o == nil || IsNil(o.IsSettled) {
		var ret bool
		return ret
	}
	return *o.IsSettled
}

// GetIsSettledOk returns a tuple with the IsSettled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerTxHistoryRecord) GetIsSettledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSettled) {
		return nil, false
	}
	return o.IsSettled, true
}

// HasIsSettled returns a boolean if a field has been set.
func (o *IndexerTxHistoryRecord) HasIsSettled() bool {
	if o != nil && !IsNil(o.IsSettled) {
		return true
	}

	return false
}

// SetIsSettled gets a reference to the given bool and assigns it to the IsSettled field.
func (o *IndexerTxHistoryRecord) SetIsSettled(v bool) {
	o.IsSettled = &v
}

// GetSettledBy returns the SettledBy field value if set, zero value otherwise.
func (o *IndexerTxHistoryRecord) GetSettledBy() string {
	if o == nil || IsNil(o.SettledBy) {
		var ret string
		return ret
	}
	return *o.SettledBy
}

// GetSettledByOk returns a tuple with the SettledBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerTxHistoryRecord) GetSettledByOk() (*string, bool) {
	if o == nil || IsNil(o.SettledBy) {
		return nil, false
	}
	return o.SettledBy, true
}

// HasSettledBy returns a boolean if a field has been set.
func (o *IndexerTxHistoryRecord) HasSettledBy() bool {
	if o != nil && !IsNil(o.SettledBy) {
		return true
	}

	return false
}

// SetSettledBy gets a reference to the given string and assigns it to the SettledBy field.
func (o *IndexerTxHistoryRecord) SetSettledBy(v string) {
	o.SettledBy = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IndexerTxHistoryRecord) GetType() IndexerTxType {
	if o == nil || IsNil(o.Type) {
		var ret IndexerTxType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerTxHistoryRecord) GetTypeOk() (*IndexerTxType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IndexerTxHistoryRecord) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given IndexerTxType and assigns it to the Type field.
func (o *IndexerTxHistoryRecord) SetType(v IndexerTxType) {
	o.Type = &v
}

// GetVirtualTxid returns the VirtualTxid field value if set, zero value otherwise.
func (o *IndexerTxHistoryRecord) GetVirtualTxid() string {
	if o == nil || IsNil(o.VirtualTxid) {
		var ret string
		return ret
	}
	return *o.VirtualTxid
}

// GetVirtualTxidOk returns a tuple with the VirtualTxid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerTxHistoryRecord) GetVirtualTxidOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualTxid) {
		return nil, false
	}
	return o.VirtualTxid, true
}

// HasVirtualTxid returns a boolean if a field has been set.
func (o *IndexerTxHistoryRecord) HasVirtualTxid() bool {
	if o != nil && !IsNil(o.VirtualTxid) {
		return true
	}

	return false
}

// SetVirtualTxid gets a reference to the given string and assigns it to the VirtualTxid field.
func (o *IndexerTxHistoryRecord) SetVirtualTxid(v string) {
	o.VirtualTxid = &v
}

func (o IndexerTxHistoryRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexerTxHistoryRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.CommitmentTxid) {
		toSerialize["commitmentTxid"] = o.CommitmentTxid
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.IsSettled) {
		toSerialize["isSettled"] = o.IsSettled
	}
	if !IsNil(o.SettledBy) {
		toSerialize["settledBy"] = o.SettledBy
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VirtualTxid) {
		toSerialize["virtualTxid"] = o.VirtualTxid
	}
	return toSerialize, nil
}

type NullableIndexerTxHistoryRecord struct {
	value *IndexerTxHistoryRecord
	isSet bool
}

func (v NullableIndexerTxHistoryRecord) Get() *IndexerTxHistoryRecord {
	return v.value
}

func (v *NullableIndexerTxHistoryRecord) Set(val *IndexerTxHistoryRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexerTxHistoryRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexerTxHistoryRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexerTxHistoryRecord(val *IndexerTxHistoryRecord) *NullableIndexerTxHistoryRecord {
	return &NullableIndexerTxHistoryRecord{value: val, isSet: true}
}

func (v NullableIndexerTxHistoryRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexerTxHistoryRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


