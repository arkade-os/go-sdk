/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubscribeForScriptsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscribeForScriptsRequest{}

// SubscribeForScriptsRequest struct for SubscribeForScriptsRequest
type SubscribeForScriptsRequest struct {
		Scripts []string `json:"scripts,omitempty"`
	// If set, update an existing subscription
		SubscriptionId *string `json:"subscriptionId,omitempty"`
}

// NewSubscribeForScriptsRequest instantiates a new SubscribeForScriptsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribeForScriptsRequest() *SubscribeForScriptsRequest {
	this := SubscribeForScriptsRequest{}
	return &this
}

// NewSubscribeForScriptsRequestWithDefaults instantiates a new SubscribeForScriptsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribeForScriptsRequestWithDefaults() *SubscribeForScriptsRequest {
	this := SubscribeForScriptsRequest{}
	return &this
}

// GetScripts returns the Scripts field value if set, zero value otherwise.
func (o *SubscribeForScriptsRequest) GetScripts() []string {
	if o == nil || IsNil(o.Scripts) {
		var ret []string
		return ret
	}
	return o.Scripts
}

// GetScriptsOk returns a tuple with the Scripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribeForScriptsRequest) GetScriptsOk() ([]string, bool) {
	if o == nil || IsNil(o.Scripts) {
		return nil, false
	}
	return o.Scripts, true
}

// HasScripts returns a boolean if a field has been set.
func (o *SubscribeForScriptsRequest) HasScripts() bool {
	if o != nil && !IsNil(o.Scripts) {
		return true
	}

	return false
}

// SetScripts gets a reference to the given []string and assigns it to the Scripts field.
func (o *SubscribeForScriptsRequest) SetScripts(v []string) {
	o.Scripts = v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *SubscribeForScriptsRequest) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribeForScriptsRequest) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *SubscribeForScriptsRequest) HasSubscriptionId() bool {
	if o != nil && !IsNil(o.SubscriptionId) {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *SubscribeForScriptsRequest) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

func (o SubscribeForScriptsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscribeForScriptsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scripts) {
		toSerialize["scripts"] = o.Scripts
	}
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	return toSerialize, nil
}

type NullableSubscribeForScriptsRequest struct {
	value *SubscribeForScriptsRequest
	isSet bool
}

func (v NullableSubscribeForScriptsRequest) Get() *SubscribeForScriptsRequest {
	return v.value
}

func (v *NullableSubscribeForScriptsRequest) Set(val *SubscribeForScriptsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribeForScriptsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribeForScriptsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribeForScriptsRequest(val *SubscribeForScriptsRequest) *NullableSubscribeForScriptsRequest {
	return &NullableSubscribeForScriptsRequest{value: val, isSet: true}
}

func (v NullableSubscribeForScriptsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribeForScriptsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


