/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetSubscriptionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSubscriptionResponse{}

// GetSubscriptionResponse struct for GetSubscriptionResponse
type GetSubscriptionResponse struct {
	Event *IndexerSubscriptionEvent `json:"event,omitempty"`
	Heartbeat map[string]interface{} `json:"heartbeat,omitempty"`
}

// NewGetSubscriptionResponse instantiates a new GetSubscriptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSubscriptionResponse() *GetSubscriptionResponse {
	this := GetSubscriptionResponse{}
	return &this
}

// NewGetSubscriptionResponseWithDefaults instantiates a new GetSubscriptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSubscriptionResponseWithDefaults() *GetSubscriptionResponse {
	this := GetSubscriptionResponse{}
	return &this
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *GetSubscriptionResponse) GetEvent() IndexerSubscriptionEvent {
	if o == nil || IsNil(o.Event) {
		var ret IndexerSubscriptionEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSubscriptionResponse) GetEventOk() (*IndexerSubscriptionEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *GetSubscriptionResponse) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given IndexerSubscriptionEvent and assigns it to the Event field.
func (o *GetSubscriptionResponse) SetEvent(v IndexerSubscriptionEvent) {
	o.Event = &v
}

// GetHeartbeat returns the Heartbeat field value if set, zero value otherwise.
func (o *GetSubscriptionResponse) GetHeartbeat() map[string]interface{} {
	if o == nil || IsNil(o.Heartbeat) {
		var ret map[string]interface{}
		return ret
	}
	return o.Heartbeat
}

// GetHeartbeatOk returns a tuple with the Heartbeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSubscriptionResponse) GetHeartbeatOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Heartbeat) {
		return map[string]interface{}{}, false
	}
	return o.Heartbeat, true
}

// HasHeartbeat returns a boolean if a field has been set.
func (o *GetSubscriptionResponse) HasHeartbeat() bool {
	if o != nil && !IsNil(o.Heartbeat) {
		return true
	}

	return false
}

// SetHeartbeat gets a reference to the given map[string]interface{} and assigns it to the Heartbeat field.
func (o *GetSubscriptionResponse) SetHeartbeat(v map[string]interface{}) {
	o.Heartbeat = v
}

func (o GetSubscriptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSubscriptionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.Heartbeat) {
		toSerialize["heartbeat"] = o.Heartbeat
	}
	return toSerialize, nil
}

type NullableGetSubscriptionResponse struct {
	value *GetSubscriptionResponse
	isSet bool
}

func (v NullableGetSubscriptionResponse) Get() *GetSubscriptionResponse {
	return v.value
}

func (v *NullableGetSubscriptionResponse) Set(val *GetSubscriptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSubscriptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSubscriptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSubscriptionResponse(val *GetSubscriptionResponse) *NullableGetSubscriptionResponse {
	return &NullableGetSubscriptionResponse{value: val, isSet: true}
}

func (v NullableGetSubscriptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSubscriptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


