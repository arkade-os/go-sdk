/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ChainedTxType the model 'ChainedTxType'
type ChainedTxType string

// List of ChainedTxType
const (
	CHAINED_TX_TYPE_UNSPECIFIED ChainedTxType = "CHAINED_TX_TYPE_UNSPECIFIED"
	CHAINED_TX_TYPE_COMMITMENT ChainedTxType = "CHAINED_TX_TYPE_COMMITMENT"
	CHAINED_TX_TYPE_ARK ChainedTxType = "CHAINED_TX_TYPE_ARK"
	CHAINED_TX_TYPE_TREE ChainedTxType = "CHAINED_TX_TYPE_TREE"
	CHAINED_TX_TYPE_CHECKPOINT ChainedTxType = "CHAINED_TX_TYPE_CHECKPOINT"
)

// All allowed values of ChainedTxType enum
var AllowedChainedTxTypeEnumValues = []ChainedTxType{
	"CHAINED_TX_TYPE_UNSPECIFIED",
	"CHAINED_TX_TYPE_COMMITMENT",
	"CHAINED_TX_TYPE_ARK",
	"CHAINED_TX_TYPE_TREE",
	"CHAINED_TX_TYPE_CHECKPOINT",
}

func (v *ChainedTxType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChainedTxType(value)
	for _, existing := range AllowedChainedTxTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChainedTxType", value)
}

// NewChainedTxTypeFromValue returns a pointer to a valid ChainedTxType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChainedTxTypeFromValue(v string) (*ChainedTxType, error) {
	ev := ChainedTxType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChainedTxType: valid values are %v", v, AllowedChainedTxTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChainedTxType) IsValid() bool {
	for _, existing := range AllowedChainedTxTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChainedTxType value
func (v ChainedTxType) Ptr() *ChainedTxType {
	return &v
}

type NullableChainedTxType struct {
	value *ChainedTxType
	isSet bool
}

func (v NullableChainedTxType) Get() *ChainedTxType {
	return v.value
}

func (v *NullableChainedTxType) Set(val *ChainedTxType) {
	v.value = val
	v.isSet = true
}

func (v NullableChainedTxType) IsSet() bool {
	return v.isSet
}

func (v *NullableChainedTxType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainedTxType(val *ChainedTxType) *NullableChainedTxType {
	return &NullableChainedTxType{value: val, isSet: true}
}

func (v NullableChainedTxType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainedTxType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

