/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IndexerTxType the model 'IndexerTxType'
type IndexerTxType string

// List of IndexerTxType
const (
	INDEXER_TX_TYPE_UNSPECIFIED IndexerTxType = "INDEXER_TX_TYPE_UNSPECIFIED"
	INDEXER_TX_TYPE_RECEIVED IndexerTxType = "INDEXER_TX_TYPE_RECEIVED"
	INDEXER_TX_TYPE_SENT IndexerTxType = "INDEXER_TX_TYPE_SENT"
)

// All allowed values of IndexerTxType enum
var AllowedIndexerTxTypeEnumValues = []IndexerTxType{
	"INDEXER_TX_TYPE_UNSPECIFIED",
	"INDEXER_TX_TYPE_RECEIVED",
	"INDEXER_TX_TYPE_SENT",
}

func (v *IndexerTxType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndexerTxType(value)
	for _, existing := range AllowedIndexerTxTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndexerTxType", value)
}

// NewIndexerTxTypeFromValue returns a pointer to a valid IndexerTxType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndexerTxTypeFromValue(v string) (*IndexerTxType, error) {
	ev := IndexerTxType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndexerTxType: valid values are %v", v, AllowedIndexerTxTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndexerTxType) IsValid() bool {
	for _, existing := range AllowedIndexerTxTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IndexerTxType value
func (v IndexerTxType) Ptr() *IndexerTxType {
	return &v
}

type NullableIndexerTxType struct {
	value *IndexerTxType
	isSet bool
}

func (v NullableIndexerTxType) Get() *IndexerTxType {
	return v.value
}

func (v *NullableIndexerTxType) Set(val *IndexerTxType) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexerTxType) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexerTxType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexerTxType(val *IndexerTxType) *NullableIndexerTxType {
	return &NullableIndexerTxType{value: val, isSet: true}
}

func (v NullableIndexerTxType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexerTxType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

