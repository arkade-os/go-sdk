/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IndexerChainedTxType the model 'IndexerChainedTxType'
type IndexerChainedTxType string

// List of IndexerChainedTxType
const (
	INDEXER_CHAINED_TX_TYPE_UNSPECIFIED IndexerChainedTxType = "INDEXER_CHAINED_TX_TYPE_UNSPECIFIED"
	INDEXER_CHAINED_TX_TYPE_COMMITMENT IndexerChainedTxType = "INDEXER_CHAINED_TX_TYPE_COMMITMENT"
	INDEXER_CHAINED_TX_TYPE_ARK IndexerChainedTxType = "INDEXER_CHAINED_TX_TYPE_ARK"
	INDEXER_CHAINED_TX_TYPE_TREE IndexerChainedTxType = "INDEXER_CHAINED_TX_TYPE_TREE"
	INDEXER_CHAINED_TX_TYPE_CHECKPOINT IndexerChainedTxType = "INDEXER_CHAINED_TX_TYPE_CHECKPOINT"
)

// All allowed values of IndexerChainedTxType enum
var AllowedIndexerChainedTxTypeEnumValues = []IndexerChainedTxType{
	"INDEXER_CHAINED_TX_TYPE_UNSPECIFIED",
	"INDEXER_CHAINED_TX_TYPE_COMMITMENT",
	"INDEXER_CHAINED_TX_TYPE_ARK",
	"INDEXER_CHAINED_TX_TYPE_TREE",
	"INDEXER_CHAINED_TX_TYPE_CHECKPOINT",
}

func (v *IndexerChainedTxType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndexerChainedTxType(value)
	for _, existing := range AllowedIndexerChainedTxTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndexerChainedTxType", value)
}

// NewIndexerChainedTxTypeFromValue returns a pointer to a valid IndexerChainedTxType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndexerChainedTxTypeFromValue(v string) (*IndexerChainedTxType, error) {
	ev := IndexerChainedTxType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndexerChainedTxType: valid values are %v", v, AllowedIndexerChainedTxTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndexerChainedTxType) IsValid() bool {
	for _, existing := range AllowedIndexerChainedTxTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IndexerChainedTxType value
func (v IndexerChainedTxType) Ptr() *IndexerChainedTxType {
	return &v
}

type NullableIndexerChainedTxType struct {
	value *IndexerChainedTxType
	isSet bool
}

func (v NullableIndexerChainedTxType) Get() *IndexerChainedTxType {
	return v.value
}

func (v *NullableIndexerChainedTxType) Set(val *IndexerChainedTxType) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexerChainedTxType) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexerChainedTxType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexerChainedTxType(val *IndexerChainedTxType) *NullableIndexerChainedTxType {
	return &NullableIndexerChainedTxType{value: val, isSet: true}
}

func (v NullableIndexerChainedTxType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexerChainedTxType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

