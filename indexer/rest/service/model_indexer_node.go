/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IndexerNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexerNode{}

// IndexerNode struct for IndexerNode
type IndexerNode struct {
	// vout -> txid
	Children map[string]string `json:"children,omitempty"`
	Txid *string `json:"txid,omitempty"`
}

// NewIndexerNode instantiates a new IndexerNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexerNode() *IndexerNode {
	this := IndexerNode{}
	return &this
}

// NewIndexerNodeWithDefaults instantiates a new IndexerNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexerNodeWithDefaults() *IndexerNode {
	this := IndexerNode{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *IndexerNode) GetChildren() map[string]string {
	if o == nil || IsNil(o.Children) {
		var ret map[string]string
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerNode) GetChildrenOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Children) {
		return map[string]string{}, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *IndexerNode) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given map[string]string and assigns it to the Children field.
func (o *IndexerNode) SetChildren(v map[string]string) {
	o.Children = v
}

// GetTxid returns the Txid field value if set, zero value otherwise.
func (o *IndexerNode) GetTxid() string {
	if o == nil || IsNil(o.Txid) {
		var ret string
		return ret
	}
	return *o.Txid
}

// GetTxidOk returns a tuple with the Txid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerNode) GetTxidOk() (*string, bool) {
	if o == nil || IsNil(o.Txid) {
		return nil, false
	}
	return o.Txid, true
}

// HasTxid returns a boolean if a field has been set.
func (o *IndexerNode) HasTxid() bool {
	if o != nil && !IsNil(o.Txid) {
		return true
	}

	return false
}

// SetTxid gets a reference to the given string and assigns it to the Txid field.
func (o *IndexerNode) SetTxid(v string) {
	o.Txid = &v
}

func (o IndexerNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexerNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Txid) {
		toSerialize["txid"] = o.Txid
	}
	return toSerialize, nil
}

type NullableIndexerNode struct {
	value *IndexerNode
	isSet bool
}

func (v NullableIndexerNode) Get() *IndexerNode {
	return v.value
}

func (v *NullableIndexerNode) Set(val *IndexerNode) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexerNode) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexerNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexerNode(val *IndexerNode) *NullableIndexerNode {
	return &NullableIndexerNode{value: val, isSet: true}
}

func (v NullableIndexerNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexerNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


