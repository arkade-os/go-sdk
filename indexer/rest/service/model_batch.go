/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Batch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Batch{}

// Batch struct for Batch
type Batch struct {
		ExpiresAt *int64 `json:"expiresAt,omitempty"`
		Swept *bool `json:"swept,omitempty"`
		TotalOutputAmount *int32 `json:"totalOutputAmount,omitempty"`
		TotalOutputVtxos *int32 `json:"totalOutputVtxos,omitempty"`
}

// NewBatch instantiates a new Batch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatch() *Batch {
	this := Batch{}
	return &this
}

// NewBatchWithDefaults instantiates a new Batch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchWithDefaults() *Batch {
	this := Batch{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *Batch) GetExpiresAt() int64 {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret int64
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetExpiresAtOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *Batch) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given int64 and assigns it to the ExpiresAt field.
func (o *Batch) SetExpiresAt(v int64) {
	o.ExpiresAt = &v
}

// GetSwept returns the Swept field value if set, zero value otherwise.
func (o *Batch) GetSwept() bool {
	if o == nil || IsNil(o.Swept) {
		var ret bool
		return ret
	}
	return *o.Swept
}

// GetSweptOk returns a tuple with the Swept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetSweptOk() (*bool, bool) {
	if o == nil || IsNil(o.Swept) {
		return nil, false
	}
	return o.Swept, true
}

// HasSwept returns a boolean if a field has been set.
func (o *Batch) HasSwept() bool {
	if o != nil && !IsNil(o.Swept) {
		return true
	}

	return false
}

// SetSwept gets a reference to the given bool and assigns it to the Swept field.
func (o *Batch) SetSwept(v bool) {
	o.Swept = &v
}

// GetTotalOutputAmount returns the TotalOutputAmount field value if set, zero value otherwise.
func (o *Batch) GetTotalOutputAmount() int32 {
	if o == nil || IsNil(o.TotalOutputAmount) {
		var ret int32
		return ret
	}
	return *o.TotalOutputAmount
}

// GetTotalOutputAmountOk returns a tuple with the TotalOutputAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetTotalOutputAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalOutputAmount) {
		return nil, false
	}
	return o.TotalOutputAmount, true
}

// HasTotalOutputAmount returns a boolean if a field has been set.
func (o *Batch) HasTotalOutputAmount() bool {
	if o != nil && !IsNil(o.TotalOutputAmount) {
		return true
	}

	return false
}

// SetTotalOutputAmount gets a reference to the given int32 and assigns it to the TotalOutputAmount field.
func (o *Batch) SetTotalOutputAmount(v int32) {
	o.TotalOutputAmount = &v
}

// GetTotalOutputVtxos returns the TotalOutputVtxos field value if set, zero value otherwise.
func (o *Batch) GetTotalOutputVtxos() int32 {
	if o == nil || IsNil(o.TotalOutputVtxos) {
		var ret int32
		return ret
	}
	return *o.TotalOutputVtxos
}

// GetTotalOutputVtxosOk returns a tuple with the TotalOutputVtxos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetTotalOutputVtxosOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalOutputVtxos) {
		return nil, false
	}
	return o.TotalOutputVtxos, true
}

// HasTotalOutputVtxos returns a boolean if a field has been set.
func (o *Batch) HasTotalOutputVtxos() bool {
	if o != nil && !IsNil(o.TotalOutputVtxos) {
		return true
	}

	return false
}

// SetTotalOutputVtxos gets a reference to the given int32 and assigns it to the TotalOutputVtxos field.
func (o *Batch) SetTotalOutputVtxos(v int32) {
	o.TotalOutputVtxos = &v
}

func (o Batch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Batch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !IsNil(o.Swept) {
		toSerialize["swept"] = o.Swept
	}
	if !IsNil(o.TotalOutputAmount) {
		toSerialize["totalOutputAmount"] = o.TotalOutputAmount
	}
	if !IsNil(o.TotalOutputVtxos) {
		toSerialize["totalOutputVtxos"] = o.TotalOutputVtxos
	}
	return toSerialize, nil
}

type NullableBatch struct {
	value *Batch
	isSet bool
}

func (v NullableBatch) Get() *Batch {
	return v.value
}

func (v *NullableBatch) Set(val *Batch) {
	v.value = val
	v.isSet = true
}

func (v NullableBatch) IsSet() bool {
	return v.isSet
}

func (v *NullableBatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatch(val *Batch) *NullableBatch {
	return &NullableBatch{value: val, isSet: true}
}

func (v NullableBatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


