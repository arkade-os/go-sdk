// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: ark/v1/service.proto

package arkv1

import (
	_ "github.com/meshapi/grpc-api-gateway/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{0}
}

type GetInfoResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SignerPubkey        string                 `protobuf:"bytes,1,opt,name=signer_pubkey,json=signerPubkey,proto3" json:"signer_pubkey,omitempty"`
	VtxoTreeExpiry      int64                  `protobuf:"varint,2,opt,name=vtxo_tree_expiry,json=vtxoTreeExpiry,proto3" json:"vtxo_tree_expiry,omitempty"`
	UnilateralExitDelay int64                  `protobuf:"varint,3,opt,name=unilateral_exit_delay,json=unilateralExitDelay,proto3" json:"unilateral_exit_delay,omitempty"`
	RoundInterval       int64                  `protobuf:"varint,4,opt,name=round_interval,json=roundInterval,proto3" json:"round_interval,omitempty"`
	Network             string                 `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Dust                int64                  `protobuf:"varint,6,opt,name=dust,proto3" json:"dust,omitempty"`
	ForfeitAddress      string                 `protobuf:"bytes,7,opt,name=forfeit_address,json=forfeitAddress,proto3" json:"forfeit_address,omitempty"`
	MarketHour          *MarketHour            `protobuf:"bytes,8,opt,name=market_hour,json=marketHour,proto3" json:"market_hour,omitempty"`
	Version             string                 `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	UtxoMinAmount       int64                  `protobuf:"varint,10,opt,name=utxo_min_amount,json=utxoMinAmount,proto3" json:"utxo_min_amount,omitempty"`
	UtxoMaxAmount       int64                  `protobuf:"varint,11,opt,name=utxo_max_amount,json=utxoMaxAmount,proto3" json:"utxo_max_amount,omitempty"` // -1 means no limit (default), 0 means boarding not allowed
	VtxoMinAmount       int64                  `protobuf:"varint,12,opt,name=vtxo_min_amount,json=vtxoMinAmount,proto3" json:"vtxo_min_amount,omitempty"`
	VtxoMaxAmount       int64                  `protobuf:"varint,13,opt,name=vtxo_max_amount,json=vtxoMaxAmount,proto3" json:"vtxo_max_amount,omitempty"` // -1 means no limit (default)
	BoardingExitDelay   int64                  `protobuf:"varint,14,opt,name=boarding_exit_delay,json=boardingExitDelay,proto3" json:"boarding_exit_delay,omitempty"`
	CheckpointTapscript string                 `protobuf:"bytes,15,opt,name=checkpoint_tapscript,json=checkpointTapscript,proto3" json:"checkpoint_tapscript,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetInfoResponse) GetSignerPubkey() string {
	if x != nil {
		return x.SignerPubkey
	}
	return ""
}

func (x *GetInfoResponse) GetVtxoTreeExpiry() int64 {
	if x != nil {
		return x.VtxoTreeExpiry
	}
	return 0
}

func (x *GetInfoResponse) GetUnilateralExitDelay() int64 {
	if x != nil {
		return x.UnilateralExitDelay
	}
	return 0
}

func (x *GetInfoResponse) GetRoundInterval() int64 {
	if x != nil {
		return x.RoundInterval
	}
	return 0
}

func (x *GetInfoResponse) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GetInfoResponse) GetDust() int64 {
	if x != nil {
		return x.Dust
	}
	return 0
}

func (x *GetInfoResponse) GetForfeitAddress() string {
	if x != nil {
		return x.ForfeitAddress
	}
	return ""
}

func (x *GetInfoResponse) GetMarketHour() *MarketHour {
	if x != nil {
		return x.MarketHour
	}
	return nil
}

func (x *GetInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetInfoResponse) GetUtxoMinAmount() int64 {
	if x != nil {
		return x.UtxoMinAmount
	}
	return 0
}

func (x *GetInfoResponse) GetUtxoMaxAmount() int64 {
	if x != nil {
		return x.UtxoMaxAmount
	}
	return 0
}

func (x *GetInfoResponse) GetVtxoMinAmount() int64 {
	if x != nil {
		return x.VtxoMinAmount
	}
	return 0
}

func (x *GetInfoResponse) GetVtxoMaxAmount() int64 {
	if x != nil {
		return x.VtxoMaxAmount
	}
	return 0
}

func (x *GetInfoResponse) GetBoardingExitDelay() int64 {
	if x != nil {
		return x.BoardingExitDelay
	}
	return 0
}

func (x *GetInfoResponse) GetCheckpointTapscript() string {
	if x != nil {
		return x.CheckpointTapscript
	}
	return ""
}

type RegisterIntentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// an intent proof that embeds the outpoints to be spent and new ones to be created, as well as the
	// proof of funds.
	Intent        *Intent `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterIntentRequest) Reset() {
	*x = RegisterIntentRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterIntentRequest) ProtoMessage() {}

func (x *RegisterIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterIntentRequest.ProtoReflect.Descriptor instead.
func (*RegisterIntentRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterIntentRequest) GetIntent() *Intent {
	if x != nil {
		return x.Intent
	}
	return nil
}

type RegisterIntentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IntentId      string                 `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterIntentResponse) Reset() {
	*x = RegisterIntentResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterIntentResponse) ProtoMessage() {}

func (x *RegisterIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterIntentResponse.ProtoReflect.Descriptor instead.
func (*RegisterIntentResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterIntentResponse) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

type DeleteIntentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// an intent proof that includes any of the inputs of the intent to be deleted to prove the
	// ownership of that intent.
	Intent        *Intent `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteIntentRequest) Reset() {
	*x = DeleteIntentRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIntentRequest) ProtoMessage() {}

func (x *DeleteIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIntentRequest.ProtoReflect.Descriptor instead.
func (*DeleteIntentRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteIntentRequest) GetIntent() *Intent {
	if x != nil {
		return x.Intent
	}
	return nil
}

type DeleteIntentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteIntentResponse) Reset() {
	*x = DeleteIntentResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIntentResponse) ProtoMessage() {}

func (x *DeleteIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIntentResponse.ProtoReflect.Descriptor instead.
func (*DeleteIntentResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{5}
}

type ConfirmRegistrationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IntentId      string                 `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmRegistrationRequest) Reset() {
	*x = ConfirmRegistrationRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRegistrationRequest) ProtoMessage() {}

func (x *ConfirmRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRegistrationRequest.ProtoReflect.Descriptor instead.
func (*ConfirmRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *ConfirmRegistrationRequest) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

type ConfirmRegistrationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmRegistrationResponse) Reset() {
	*x = ConfirmRegistrationResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRegistrationResponse) ProtoMessage() {}

func (x *ConfirmRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRegistrationResponse.ProtoReflect.Descriptor instead.
func (*ConfirmRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{7}
}

type SubmitTreeNoncesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Pubkey        string                 `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	TreeNonces    string                 `protobuf:"bytes,3,opt,name=tree_nonces,json=treeNonces,proto3" json:"tree_nonces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTreeNoncesRequest) Reset() {
	*x = SubmitTreeNoncesRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTreeNoncesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTreeNoncesRequest) ProtoMessage() {}

func (x *SubmitTreeNoncesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTreeNoncesRequest.ProtoReflect.Descriptor instead.
func (*SubmitTreeNoncesRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitTreeNoncesRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *SubmitTreeNoncesRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *SubmitTreeNoncesRequest) GetTreeNonces() string {
	if x != nil {
		return x.TreeNonces
	}
	return ""
}

type SubmitTreeNoncesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTreeNoncesResponse) Reset() {
	*x = SubmitTreeNoncesResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTreeNoncesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTreeNoncesResponse) ProtoMessage() {}

func (x *SubmitTreeNoncesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTreeNoncesResponse.ProtoReflect.Descriptor instead.
func (*SubmitTreeNoncesResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{9}
}

type SubmitTreeSignaturesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BatchId        string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Pubkey         string                 `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	TreeSignatures string                 `protobuf:"bytes,3,opt,name=tree_signatures,json=treeSignatures,proto3" json:"tree_signatures,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubmitTreeSignaturesRequest) Reset() {
	*x = SubmitTreeSignaturesRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTreeSignaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTreeSignaturesRequest) ProtoMessage() {}

func (x *SubmitTreeSignaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTreeSignaturesRequest.ProtoReflect.Descriptor instead.
func (*SubmitTreeSignaturesRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *SubmitTreeSignaturesRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *SubmitTreeSignaturesRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *SubmitTreeSignaturesRequest) GetTreeSignatures() string {
	if x != nil {
		return x.TreeSignatures
	}
	return ""
}

type SubmitTreeSignaturesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTreeSignaturesResponse) Reset() {
	*x = SubmitTreeSignaturesResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTreeSignaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTreeSignaturesResponse) ProtoMessage() {}

func (x *SubmitTreeSignaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTreeSignaturesResponse.ProtoReflect.Descriptor instead.
func (*SubmitTreeSignaturesResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{11}
}

type SubmitSignedForfeitTxsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Forfeit txs signed by the user.
	SignedForfeitTxs []string `protobuf:"bytes,1,rep,name=signed_forfeit_txs,json=signedForfeitTxs,proto3" json:"signed_forfeit_txs,omitempty"`
	// The user has to sign also the commitment tx if he registered a boarding UTXO.
	SignedCommitmentTx string `protobuf:"bytes,2,opt,name=signed_commitment_tx,json=signedCommitmentTx,proto3" json:"signed_commitment_tx,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubmitSignedForfeitTxsRequest) Reset() {
	*x = SubmitSignedForfeitTxsRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitSignedForfeitTxsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitSignedForfeitTxsRequest) ProtoMessage() {}

func (x *SubmitSignedForfeitTxsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitSignedForfeitTxsRequest.ProtoReflect.Descriptor instead.
func (*SubmitSignedForfeitTxsRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *SubmitSignedForfeitTxsRequest) GetSignedForfeitTxs() []string {
	if x != nil {
		return x.SignedForfeitTxs
	}
	return nil
}

func (x *SubmitSignedForfeitTxsRequest) GetSignedCommitmentTx() string {
	if x != nil {
		return x.SignedCommitmentTx
	}
	return ""
}

type SubmitSignedForfeitTxsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitSignedForfeitTxsResponse) Reset() {
	*x = SubmitSignedForfeitTxsResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitSignedForfeitTxsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitSignedForfeitTxsResponse) ProtoMessage() {}

func (x *SubmitSignedForfeitTxsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitSignedForfeitTxsResponse.ProtoReflect.Descriptor instead.
func (*SubmitSignedForfeitTxsResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{13}
}

type GetEventStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topics        []string               `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEventStreamRequest) Reset() {
	*x = GetEventStreamRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventStreamRequest) ProtoMessage() {}

func (x *GetEventStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventStreamRequest.ProtoReflect.Descriptor instead.
func (*GetEventStreamRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetEventStreamRequest) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type GetEventStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*GetEventStreamResponse_BatchStarted
	//	*GetEventStreamResponse_BatchFinalization
	//	*GetEventStreamResponse_BatchFinalized
	//	*GetEventStreamResponse_BatchFailed
	//	*GetEventStreamResponse_TreeSigningStarted
	//	*GetEventStreamResponse_TreeNoncesAggregated
	//	*GetEventStreamResponse_TreeTx
	//	*GetEventStreamResponse_TreeSignature
	//	*GetEventStreamResponse_TreeNonces
	//	*GetEventStreamResponse_Heartbeat
	Event         isGetEventStreamResponse_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEventStreamResponse) Reset() {
	*x = GetEventStreamResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventStreamResponse) ProtoMessage() {}

func (x *GetEventStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventStreamResponse.ProtoReflect.Descriptor instead.
func (*GetEventStreamResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetEventStreamResponse) GetEvent() isGetEventStreamResponse_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *GetEventStreamResponse) GetBatchStarted() *BatchStartedEvent {
	if x != nil {
		if x, ok := x.Event.(*GetEventStreamResponse_BatchStarted); ok {
			return x.BatchStarted
		}
	}
	return nil
}

func (x *GetEventStreamResponse) GetBatchFinalization() *BatchFinalizationEvent {
	if x != nil {
		if x, ok := x.Event.(*GetEventStreamResponse_BatchFinalization); ok {
			return x.BatchFinalization
		}
	}
	return nil
}

func (x *GetEventStreamResponse) GetBatchFinalized() *BatchFinalizedEvent {
	if x != nil {
		if x, ok := x.Event.(*GetEventStreamResponse_BatchFinalized); ok {
			return x.BatchFinalized
		}
	}
	return nil
}

func (x *GetEventStreamResponse) GetBatchFailed() *BatchFailedEvent {
	if x != nil {
		if x, ok := x.Event.(*GetEventStreamResponse_BatchFailed); ok {
			return x.BatchFailed
		}
	}
	return nil
}

func (x *GetEventStreamResponse) GetTreeSigningStarted() *TreeSigningStartedEvent {
	if x != nil {
		if x, ok := x.Event.(*GetEventStreamResponse_TreeSigningStarted); ok {
			return x.TreeSigningStarted
		}
	}
	return nil
}

func (x *GetEventStreamResponse) GetTreeNoncesAggregated() *TreeNoncesAggregatedEvent {
	if x != nil {
		if x, ok := x.Event.(*GetEventStreamResponse_TreeNoncesAggregated); ok {
			return x.TreeNoncesAggregated
		}
	}
	return nil
}

func (x *GetEventStreamResponse) GetTreeTx() *TreeTxEvent {
	if x != nil {
		if x, ok := x.Event.(*GetEventStreamResponse_TreeTx); ok {
			return x.TreeTx
		}
	}
	return nil
}

func (x *GetEventStreamResponse) GetTreeSignature() *TreeSignatureEvent {
	if x != nil {
		if x, ok := x.Event.(*GetEventStreamResponse_TreeSignature); ok {
			return x.TreeSignature
		}
	}
	return nil
}

func (x *GetEventStreamResponse) GetTreeNonces() *TreeNoncesEvent {
	if x != nil {
		if x, ok := x.Event.(*GetEventStreamResponse_TreeNonces); ok {
			return x.TreeNonces
		}
	}
	return nil
}

func (x *GetEventStreamResponse) GetHeartbeat() *Heartbeat {
	if x != nil {
		if x, ok := x.Event.(*GetEventStreamResponse_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

type isGetEventStreamResponse_Event interface {
	isGetEventStreamResponse_Event()
}

type GetEventStreamResponse_BatchStarted struct {
	BatchStarted *BatchStartedEvent `protobuf:"bytes,1,opt,name=batch_started,json=batchStarted,proto3,oneof"`
}

type GetEventStreamResponse_BatchFinalization struct {
	BatchFinalization *BatchFinalizationEvent `protobuf:"bytes,2,opt,name=batch_finalization,json=batchFinalization,proto3,oneof"`
}

type GetEventStreamResponse_BatchFinalized struct {
	BatchFinalized *BatchFinalizedEvent `protobuf:"bytes,3,opt,name=batch_finalized,json=batchFinalized,proto3,oneof"`
}

type GetEventStreamResponse_BatchFailed struct {
	BatchFailed *BatchFailedEvent `protobuf:"bytes,4,opt,name=batch_failed,json=batchFailed,proto3,oneof"`
}

type GetEventStreamResponse_TreeSigningStarted struct {
	TreeSigningStarted *TreeSigningStartedEvent `protobuf:"bytes,5,opt,name=tree_signing_started,json=treeSigningStarted,proto3,oneof"`
}

type GetEventStreamResponse_TreeNoncesAggregated struct {
	TreeNoncesAggregated *TreeNoncesAggregatedEvent `protobuf:"bytes,6,opt,name=tree_nonces_aggregated,json=treeNoncesAggregated,proto3,oneof"`
}

type GetEventStreamResponse_TreeTx struct {
	TreeTx *TreeTxEvent `protobuf:"bytes,7,opt,name=tree_tx,json=treeTx,proto3,oneof"`
}

type GetEventStreamResponse_TreeSignature struct {
	TreeSignature *TreeSignatureEvent `protobuf:"bytes,8,opt,name=tree_signature,json=treeSignature,proto3,oneof"`
}

type GetEventStreamResponse_TreeNonces struct {
	TreeNonces *TreeNoncesEvent `protobuf:"bytes,9,opt,name=tree_nonces,json=treeNonces,proto3,oneof"`
}

type GetEventStreamResponse_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,10,opt,name=heartbeat,proto3,oneof"`
}

func (*GetEventStreamResponse_BatchStarted) isGetEventStreamResponse_Event() {}

func (*GetEventStreamResponse_BatchFinalization) isGetEventStreamResponse_Event() {}

func (*GetEventStreamResponse_BatchFinalized) isGetEventStreamResponse_Event() {}

func (*GetEventStreamResponse_BatchFailed) isGetEventStreamResponse_Event() {}

func (*GetEventStreamResponse_TreeSigningStarted) isGetEventStreamResponse_Event() {}

func (*GetEventStreamResponse_TreeNoncesAggregated) isGetEventStreamResponse_Event() {}

func (*GetEventStreamResponse_TreeTx) isGetEventStreamResponse_Event() {}

func (*GetEventStreamResponse_TreeSignature) isGetEventStreamResponse_Event() {}

func (*GetEventStreamResponse_TreeNonces) isGetEventStreamResponse_Event() {}

func (*GetEventStreamResponse_Heartbeat) isGetEventStreamResponse_Event() {}

type SubmitTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SignedArkTx   string                 `protobuf:"bytes,1,opt,name=signed_ark_tx,json=signedArkTx,proto3" json:"signed_ark_tx,omitempty"`
	CheckpointTxs []string               `protobuf:"bytes,2,rep,name=checkpoint_txs,json=checkpointTxs,proto3" json:"checkpoint_txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTxRequest) Reset() {
	*x = SubmitTxRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTxRequest) ProtoMessage() {}

func (x *SubmitTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTxRequest.ProtoReflect.Descriptor instead.
func (*SubmitTxRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *SubmitTxRequest) GetSignedArkTx() string {
	if x != nil {
		return x.SignedArkTx
	}
	return ""
}

func (x *SubmitTxRequest) GetCheckpointTxs() []string {
	if x != nil {
		return x.CheckpointTxs
	}
	return nil
}

type SubmitTxResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ArkTxid             string                 `protobuf:"bytes,1,opt,name=ark_txid,json=arkTxid,proto3" json:"ark_txid,omitempty"`
	FinalArkTx          string                 `protobuf:"bytes,2,opt,name=final_ark_tx,json=finalArkTx,proto3" json:"final_ark_tx,omitempty"`
	SignedCheckpointTxs []string               `protobuf:"bytes,3,rep,name=signed_checkpoint_txs,json=signedCheckpointTxs,proto3" json:"signed_checkpoint_txs,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SubmitTxResponse) Reset() {
	*x = SubmitTxResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTxResponse) ProtoMessage() {}

func (x *SubmitTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTxResponse.ProtoReflect.Descriptor instead.
func (*SubmitTxResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *SubmitTxResponse) GetArkTxid() string {
	if x != nil {
		return x.ArkTxid
	}
	return ""
}

func (x *SubmitTxResponse) GetFinalArkTx() string {
	if x != nil {
		return x.FinalArkTx
	}
	return ""
}

func (x *SubmitTxResponse) GetSignedCheckpointTxs() []string {
	if x != nil {
		return x.SignedCheckpointTxs
	}
	return nil
}

type FinalizeTxRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ArkTxid            string                 `protobuf:"bytes,1,opt,name=ark_txid,json=arkTxid,proto3" json:"ark_txid,omitempty"`
	FinalCheckpointTxs []string               `protobuf:"bytes,2,rep,name=final_checkpoint_txs,json=finalCheckpointTxs,proto3" json:"final_checkpoint_txs,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FinalizeTxRequest) Reset() {
	*x = FinalizeTxRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeTxRequest) ProtoMessage() {}

func (x *FinalizeTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeTxRequest.ProtoReflect.Descriptor instead.
func (*FinalizeTxRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *FinalizeTxRequest) GetArkTxid() string {
	if x != nil {
		return x.ArkTxid
	}
	return ""
}

func (x *FinalizeTxRequest) GetFinalCheckpointTxs() []string {
	if x != nil {
		return x.FinalCheckpointTxs
	}
	return nil
}

type FinalizeTxResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeTxResponse) Reset() {
	*x = FinalizeTxResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeTxResponse) ProtoMessage() {}

func (x *FinalizeTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeTxResponse.ProtoReflect.Descriptor instead.
func (*FinalizeTxResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{19}
}

type GetTransactionsStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionsStreamRequest) Reset() {
	*x = GetTransactionsStreamRequest{}
	mi := &file_ark_v1_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsStreamRequest) ProtoMessage() {}

func (x *GetTransactionsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsStreamRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionsStreamRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{20}
}

type GetTransactionsStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*GetTransactionsStreamResponse_CommitmentTx
	//	*GetTransactionsStreamResponse_ArkTx
	//	*GetTransactionsStreamResponse_Heartbeat
	Data          isGetTransactionsStreamResponse_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionsStreamResponse) Reset() {
	*x = GetTransactionsStreamResponse{}
	mi := &file_ark_v1_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsStreamResponse) ProtoMessage() {}

func (x *GetTransactionsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsStreamResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionsStreamResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetTransactionsStreamResponse) GetData() isGetTransactionsStreamResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTransactionsStreamResponse) GetCommitmentTx() *TxNotification {
	if x != nil {
		if x, ok := x.Data.(*GetTransactionsStreamResponse_CommitmentTx); ok {
			return x.CommitmentTx
		}
	}
	return nil
}

func (x *GetTransactionsStreamResponse) GetArkTx() *TxNotification {
	if x != nil {
		if x, ok := x.Data.(*GetTransactionsStreamResponse_ArkTx); ok {
			return x.ArkTx
		}
	}
	return nil
}

func (x *GetTransactionsStreamResponse) GetHeartbeat() *Heartbeat {
	if x != nil {
		if x, ok := x.Data.(*GetTransactionsStreamResponse_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

type isGetTransactionsStreamResponse_Data interface {
	isGetTransactionsStreamResponse_Data()
}

type GetTransactionsStreamResponse_CommitmentTx struct {
	CommitmentTx *TxNotification `protobuf:"bytes,1,opt,name=commitment_tx,json=commitmentTx,proto3,oneof"`
}

type GetTransactionsStreamResponse_ArkTx struct {
	ArkTx *TxNotification `protobuf:"bytes,2,opt,name=ark_tx,json=arkTx,proto3,oneof"`
}

type GetTransactionsStreamResponse_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,3,opt,name=heartbeat,proto3,oneof"`
}

func (*GetTransactionsStreamResponse_CommitmentTx) isGetTransactionsStreamResponse_Data() {}

func (*GetTransactionsStreamResponse_ArkTx) isGetTransactionsStreamResponse_Data() {}

func (*GetTransactionsStreamResponse_Heartbeat) isGetTransactionsStreamResponse_Data() {}

var File_ark_v1_service_proto protoreflect.FileDescriptor

const file_ark_v1_service_proto_rawDesc = "" +
	"\n" +
	"\x14ark/v1/service.proto\x12\x06ark.v1\x1a!meshapi/gateway/annotations.proto\x1a\x12ark/v1/types.proto\"\x10\n" +
	"\x0eGetInfoRequest\"\xe4\x04\n" +
	"\x0fGetInfoResponse\x12#\n" +
	"\rsigner_pubkey\x18\x01 \x01(\tR\fsignerPubkey\x12(\n" +
	"\x10vtxo_tree_expiry\x18\x02 \x01(\x03R\x0evtxoTreeExpiry\x122\n" +
	"\x15unilateral_exit_delay\x18\x03 \x01(\x03R\x13unilateralExitDelay\x12%\n" +
	"\x0eround_interval\x18\x04 \x01(\x03R\rroundInterval\x12\x18\n" +
	"\anetwork\x18\x05 \x01(\tR\anetwork\x12\x12\n" +
	"\x04dust\x18\x06 \x01(\x03R\x04dust\x12'\n" +
	"\x0fforfeit_address\x18\a \x01(\tR\x0eforfeitAddress\x123\n" +
	"\vmarket_hour\x18\b \x01(\v2\x12.ark.v1.MarketHourR\n" +
	"marketHour\x12\x18\n" +
	"\aversion\x18\t \x01(\tR\aversion\x12&\n" +
	"\x0futxo_min_amount\x18\n" +
	" \x01(\x03R\rutxoMinAmount\x12&\n" +
	"\x0futxo_max_amount\x18\v \x01(\x03R\rutxoMaxAmount\x12&\n" +
	"\x0fvtxo_min_amount\x18\f \x01(\x03R\rvtxoMinAmount\x12&\n" +
	"\x0fvtxo_max_amount\x18\r \x01(\x03R\rvtxoMaxAmount\x12.\n" +
	"\x13boarding_exit_delay\x18\x0e \x01(\x03R\x11boardingExitDelay\x121\n" +
	"\x14checkpoint_tapscript\x18\x0f \x01(\tR\x13checkpointTapscript\"?\n" +
	"\x15RegisterIntentRequest\x12&\n" +
	"\x06intent\x18\x01 \x01(\v2\x0e.ark.v1.IntentR\x06intent\"5\n" +
	"\x16RegisterIntentResponse\x12\x1b\n" +
	"\tintent_id\x18\x01 \x01(\tR\bintentId\"=\n" +
	"\x13DeleteIntentRequest\x12&\n" +
	"\x06intent\x18\x01 \x01(\v2\x0e.ark.v1.IntentR\x06intent\"\x16\n" +
	"\x14DeleteIntentResponse\"9\n" +
	"\x1aConfirmRegistrationRequest\x12\x1b\n" +
	"\tintent_id\x18\x01 \x01(\tR\bintentId\"\x1d\n" +
	"\x1bConfirmRegistrationResponse\"m\n" +
	"\x17SubmitTreeNoncesRequest\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12\x16\n" +
	"\x06pubkey\x18\x02 \x01(\tR\x06pubkey\x12\x1f\n" +
	"\vtree_nonces\x18\x03 \x01(\tR\n" +
	"treeNonces\"\x1a\n" +
	"\x18SubmitTreeNoncesResponse\"y\n" +
	"\x1bSubmitTreeSignaturesRequest\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12\x16\n" +
	"\x06pubkey\x18\x02 \x01(\tR\x06pubkey\x12'\n" +
	"\x0ftree_signatures\x18\x03 \x01(\tR\x0etreeSignatures\"\x1e\n" +
	"\x1cSubmitTreeSignaturesResponse\"\x7f\n" +
	"\x1dSubmitSignedForfeitTxsRequest\x12,\n" +
	"\x12signed_forfeit_txs\x18\x01 \x03(\tR\x10signedForfeitTxs\x120\n" +
	"\x14signed_commitment_tx\x18\x02 \x01(\tR\x12signedCommitmentTx\" \n" +
	"\x1eSubmitSignedForfeitTxsResponse\"/\n" +
	"\x15GetEventStreamRequest\x12\x16\n" +
	"\x06topics\x18\x01 \x03(\tR\x06topics\"\xcf\x05\n" +
	"\x16GetEventStreamResponse\x12@\n" +
	"\rbatch_started\x18\x01 \x01(\v2\x19.ark.v1.BatchStartedEventH\x00R\fbatchStarted\x12O\n" +
	"\x12batch_finalization\x18\x02 \x01(\v2\x1e.ark.v1.BatchFinalizationEventH\x00R\x11batchFinalization\x12F\n" +
	"\x0fbatch_finalized\x18\x03 \x01(\v2\x1b.ark.v1.BatchFinalizedEventH\x00R\x0ebatchFinalized\x12=\n" +
	"\fbatch_failed\x18\x04 \x01(\v2\x18.ark.v1.BatchFailedEventH\x00R\vbatchFailed\x12S\n" +
	"\x14tree_signing_started\x18\x05 \x01(\v2\x1f.ark.v1.TreeSigningStartedEventH\x00R\x12treeSigningStarted\x12Y\n" +
	"\x16tree_nonces_aggregated\x18\x06 \x01(\v2!.ark.v1.TreeNoncesAggregatedEventH\x00R\x14treeNoncesAggregated\x12.\n" +
	"\atree_tx\x18\a \x01(\v2\x13.ark.v1.TreeTxEventH\x00R\x06treeTx\x12C\n" +
	"\x0etree_signature\x18\b \x01(\v2\x1a.ark.v1.TreeSignatureEventH\x00R\rtreeSignature\x12:\n" +
	"\vtree_nonces\x18\t \x01(\v2\x17.ark.v1.TreeNoncesEventH\x00R\n" +
	"treeNonces\x121\n" +
	"\theartbeat\x18\n" +
	" \x01(\v2\x11.ark.v1.HeartbeatH\x00R\theartbeatB\a\n" +
	"\x05event\"\\\n" +
	"\x0fSubmitTxRequest\x12\"\n" +
	"\rsigned_ark_tx\x18\x01 \x01(\tR\vsignedArkTx\x12%\n" +
	"\x0echeckpoint_txs\x18\x02 \x03(\tR\rcheckpointTxs\"\x83\x01\n" +
	"\x10SubmitTxResponse\x12\x19\n" +
	"\bark_txid\x18\x01 \x01(\tR\aarkTxid\x12 \n" +
	"\ffinal_ark_tx\x18\x02 \x01(\tR\n" +
	"finalArkTx\x122\n" +
	"\x15signed_checkpoint_txs\x18\x03 \x03(\tR\x13signedCheckpointTxs\"`\n" +
	"\x11FinalizeTxRequest\x12\x19\n" +
	"\bark_txid\x18\x01 \x01(\tR\aarkTxid\x120\n" +
	"\x14final_checkpoint_txs\x18\x02 \x03(\tR\x12finalCheckpointTxs\"\x14\n" +
	"\x12FinalizeTxResponse\"\x1e\n" +
	"\x1cGetTransactionsStreamRequest\"\xca\x01\n" +
	"\x1dGetTransactionsStreamResponse\x12=\n" +
	"\rcommitment_tx\x18\x01 \x01(\v2\x16.ark.v1.TxNotificationH\x00R\fcommitmentTx\x12/\n" +
	"\x06ark_tx\x18\x02 \x01(\v2\x16.ark.v1.TxNotificationH\x00R\x05arkTx\x121\n" +
	"\theartbeat\x18\x03 \x01(\v2\x11.ark.v1.HeartbeatH\x00R\theartbeatB\x06\n" +
	"\x04data2\xe3\t\n" +
	"\n" +
	"ArkService\x12I\n" +
	"\aGetInfo\x12\x16.ark.v1.GetInfoRequest\x1a\x17.ark.v1.GetInfoResponse\"\r\xb2J\n" +
	"\x12\b/v1/info\x12q\n" +
	"\x0eRegisterIntent\x12\x1d.ark.v1.RegisterIntentRequest\x1a\x1e.ark.v1.RegisterIntentResponse\" \xb2J\x1dB\x01*\"\x18/v1/batch/registerIntent\x12i\n" +
	"\fDeleteIntent\x12\x1b.ark.v1.DeleteIntentRequest\x1a\x1c.ark.v1.DeleteIntentResponse\"\x1e\xb2J\x1bB\x01*\"\x16/v1/batch/deleteIntent\x12u\n" +
	"\x13ConfirmRegistration\x12\".ark.v1.ConfirmRegistrationRequest\x1a#.ark.v1.ConfirmRegistrationResponse\"\x15\xb2J\x12B\x01*\"\r/v1/batch/ack\x12z\n" +
	"\x10SubmitTreeNonces\x12\x1f.ark.v1.SubmitTreeNoncesRequest\x1a .ark.v1.SubmitTreeNoncesResponse\"#\xb2J B\x01*\"\x1b/v1/batch/tree/submitNonces\x12\x8a\x01\n" +
	"\x14SubmitTreeSignatures\x12#.ark.v1.SubmitTreeSignaturesRequest\x1a$.ark.v1.SubmitTreeSignaturesResponse\"'\xb2J$B\x01*\"\x1f/v1/batch/tree/submitSignatures\x12\x8b\x01\n" +
	"\x16SubmitSignedForfeitTxs\x12%.ark.v1.SubmitSignedForfeitTxsRequest\x1a&.ark.v1.SubmitSignedForfeitTxsResponse\"\"\xb2J\x1fB\x01*\"\x1a/v1/batch/submitForfeitTxs\x12n\n" +
	"\x0eGetEventStream\x12\x1d.ark.v1.GetEventStreamRequest\x1a\x1e.ark.v1.GetEventStreamResponse\"\x1b\xb2J\x18b\x04\b\x01\x18\x01\x12\x10/v1/batch/events0\x01\x12T\n" +
	"\bSubmitTx\x12\x17.ark.v1.SubmitTxRequest\x1a\x18.ark.v1.SubmitTxResponse\"\x15\xb2J\x12B\x01*\"\r/v1/tx/submit\x12\\\n" +
	"\n" +
	"FinalizeTx\x12\x19.ark.v1.FinalizeTxRequest\x1a\x1a.ark.v1.FinalizeTxResponse\"\x17\xb2J\x14B\x01*\"\x0f/v1/tx/finalize\x12z\n" +
	"\x15GetTransactionsStream\x12$.ark.v1.GetTransactionsStreamRequest\x1a%.ark.v1.GetTransactionsStreamResponse\"\x12\xb2J\x0fb\x04\b\x01\x18\x01\x12\a/v1/txs0\x01B\x93\x01\n" +
	"\n" +
	"com.ark.v1B\fServiceProtoP\x01Z>github.com/arkade-os/go-sdk/api-spec/protobuf/gen/ark/v1;arkv1\xa2\x02\x03AXX\xaa\x02\x06Ark.V1\xca\x02\x06Ark\\V1\xe2\x02\x12Ark\\V1\\GPBMetadata\xea\x02\aArk::V1b\x06proto3"

var (
	file_ark_v1_service_proto_rawDescOnce sync.Once
	file_ark_v1_service_proto_rawDescData []byte
)

func file_ark_v1_service_proto_rawDescGZIP() []byte {
	file_ark_v1_service_proto_rawDescOnce.Do(func() {
		file_ark_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ark_v1_service_proto_rawDesc), len(file_ark_v1_service_proto_rawDesc)))
	})
	return file_ark_v1_service_proto_rawDescData
}

var file_ark_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_ark_v1_service_proto_goTypes = []any{
	(*GetInfoRequest)(nil),                 // 0: ark.v1.GetInfoRequest
	(*GetInfoResponse)(nil),                // 1: ark.v1.GetInfoResponse
	(*RegisterIntentRequest)(nil),          // 2: ark.v1.RegisterIntentRequest
	(*RegisterIntentResponse)(nil),         // 3: ark.v1.RegisterIntentResponse
	(*DeleteIntentRequest)(nil),            // 4: ark.v1.DeleteIntentRequest
	(*DeleteIntentResponse)(nil),           // 5: ark.v1.DeleteIntentResponse
	(*ConfirmRegistrationRequest)(nil),     // 6: ark.v1.ConfirmRegistrationRequest
	(*ConfirmRegistrationResponse)(nil),    // 7: ark.v1.ConfirmRegistrationResponse
	(*SubmitTreeNoncesRequest)(nil),        // 8: ark.v1.SubmitTreeNoncesRequest
	(*SubmitTreeNoncesResponse)(nil),       // 9: ark.v1.SubmitTreeNoncesResponse
	(*SubmitTreeSignaturesRequest)(nil),    // 10: ark.v1.SubmitTreeSignaturesRequest
	(*SubmitTreeSignaturesResponse)(nil),   // 11: ark.v1.SubmitTreeSignaturesResponse
	(*SubmitSignedForfeitTxsRequest)(nil),  // 12: ark.v1.SubmitSignedForfeitTxsRequest
	(*SubmitSignedForfeitTxsResponse)(nil), // 13: ark.v1.SubmitSignedForfeitTxsResponse
	(*GetEventStreamRequest)(nil),          // 14: ark.v1.GetEventStreamRequest
	(*GetEventStreamResponse)(nil),         // 15: ark.v1.GetEventStreamResponse
	(*SubmitTxRequest)(nil),                // 16: ark.v1.SubmitTxRequest
	(*SubmitTxResponse)(nil),               // 17: ark.v1.SubmitTxResponse
	(*FinalizeTxRequest)(nil),              // 18: ark.v1.FinalizeTxRequest
	(*FinalizeTxResponse)(nil),             // 19: ark.v1.FinalizeTxResponse
	(*GetTransactionsStreamRequest)(nil),   // 20: ark.v1.GetTransactionsStreamRequest
	(*GetTransactionsStreamResponse)(nil),  // 21: ark.v1.GetTransactionsStreamResponse
	(*MarketHour)(nil),                     // 22: ark.v1.MarketHour
	(*Intent)(nil),                         // 23: ark.v1.Intent
	(*BatchStartedEvent)(nil),              // 24: ark.v1.BatchStartedEvent
	(*BatchFinalizationEvent)(nil),         // 25: ark.v1.BatchFinalizationEvent
	(*BatchFinalizedEvent)(nil),            // 26: ark.v1.BatchFinalizedEvent
	(*BatchFailedEvent)(nil),               // 27: ark.v1.BatchFailedEvent
	(*TreeSigningStartedEvent)(nil),        // 28: ark.v1.TreeSigningStartedEvent
	(*TreeNoncesAggregatedEvent)(nil),      // 29: ark.v1.TreeNoncesAggregatedEvent
	(*TreeTxEvent)(nil),                    // 30: ark.v1.TreeTxEvent
	(*TreeSignatureEvent)(nil),             // 31: ark.v1.TreeSignatureEvent
	(*TreeNoncesEvent)(nil),                // 32: ark.v1.TreeNoncesEvent
	(*Heartbeat)(nil),                      // 33: ark.v1.Heartbeat
	(*TxNotification)(nil),                 // 34: ark.v1.TxNotification
}
var file_ark_v1_service_proto_depIdxs = []int32{
	22, // 0: ark.v1.GetInfoResponse.market_hour:type_name -> ark.v1.MarketHour
	23, // 1: ark.v1.RegisterIntentRequest.intent:type_name -> ark.v1.Intent
	23, // 2: ark.v1.DeleteIntentRequest.intent:type_name -> ark.v1.Intent
	24, // 3: ark.v1.GetEventStreamResponse.batch_started:type_name -> ark.v1.BatchStartedEvent
	25, // 4: ark.v1.GetEventStreamResponse.batch_finalization:type_name -> ark.v1.BatchFinalizationEvent
	26, // 5: ark.v1.GetEventStreamResponse.batch_finalized:type_name -> ark.v1.BatchFinalizedEvent
	27, // 6: ark.v1.GetEventStreamResponse.batch_failed:type_name -> ark.v1.BatchFailedEvent
	28, // 7: ark.v1.GetEventStreamResponse.tree_signing_started:type_name -> ark.v1.TreeSigningStartedEvent
	29, // 8: ark.v1.GetEventStreamResponse.tree_nonces_aggregated:type_name -> ark.v1.TreeNoncesAggregatedEvent
	30, // 9: ark.v1.GetEventStreamResponse.tree_tx:type_name -> ark.v1.TreeTxEvent
	31, // 10: ark.v1.GetEventStreamResponse.tree_signature:type_name -> ark.v1.TreeSignatureEvent
	32, // 11: ark.v1.GetEventStreamResponse.tree_nonces:type_name -> ark.v1.TreeNoncesEvent
	33, // 12: ark.v1.GetEventStreamResponse.heartbeat:type_name -> ark.v1.Heartbeat
	34, // 13: ark.v1.GetTransactionsStreamResponse.commitment_tx:type_name -> ark.v1.TxNotification
	34, // 14: ark.v1.GetTransactionsStreamResponse.ark_tx:type_name -> ark.v1.TxNotification
	33, // 15: ark.v1.GetTransactionsStreamResponse.heartbeat:type_name -> ark.v1.Heartbeat
	0,  // 16: ark.v1.ArkService.GetInfo:input_type -> ark.v1.GetInfoRequest
	2,  // 17: ark.v1.ArkService.RegisterIntent:input_type -> ark.v1.RegisterIntentRequest
	4,  // 18: ark.v1.ArkService.DeleteIntent:input_type -> ark.v1.DeleteIntentRequest
	6,  // 19: ark.v1.ArkService.ConfirmRegistration:input_type -> ark.v1.ConfirmRegistrationRequest
	8,  // 20: ark.v1.ArkService.SubmitTreeNonces:input_type -> ark.v1.SubmitTreeNoncesRequest
	10, // 21: ark.v1.ArkService.SubmitTreeSignatures:input_type -> ark.v1.SubmitTreeSignaturesRequest
	12, // 22: ark.v1.ArkService.SubmitSignedForfeitTxs:input_type -> ark.v1.SubmitSignedForfeitTxsRequest
	14, // 23: ark.v1.ArkService.GetEventStream:input_type -> ark.v1.GetEventStreamRequest
	16, // 24: ark.v1.ArkService.SubmitTx:input_type -> ark.v1.SubmitTxRequest
	18, // 25: ark.v1.ArkService.FinalizeTx:input_type -> ark.v1.FinalizeTxRequest
	20, // 26: ark.v1.ArkService.GetTransactionsStream:input_type -> ark.v1.GetTransactionsStreamRequest
	1,  // 27: ark.v1.ArkService.GetInfo:output_type -> ark.v1.GetInfoResponse
	3,  // 28: ark.v1.ArkService.RegisterIntent:output_type -> ark.v1.RegisterIntentResponse
	5,  // 29: ark.v1.ArkService.DeleteIntent:output_type -> ark.v1.DeleteIntentResponse
	7,  // 30: ark.v1.ArkService.ConfirmRegistration:output_type -> ark.v1.ConfirmRegistrationResponse
	9,  // 31: ark.v1.ArkService.SubmitTreeNonces:output_type -> ark.v1.SubmitTreeNoncesResponse
	11, // 32: ark.v1.ArkService.SubmitTreeSignatures:output_type -> ark.v1.SubmitTreeSignaturesResponse
	13, // 33: ark.v1.ArkService.SubmitSignedForfeitTxs:output_type -> ark.v1.SubmitSignedForfeitTxsResponse
	15, // 34: ark.v1.ArkService.GetEventStream:output_type -> ark.v1.GetEventStreamResponse
	17, // 35: ark.v1.ArkService.SubmitTx:output_type -> ark.v1.SubmitTxResponse
	19, // 36: ark.v1.ArkService.FinalizeTx:output_type -> ark.v1.FinalizeTxResponse
	21, // 37: ark.v1.ArkService.GetTransactionsStream:output_type -> ark.v1.GetTransactionsStreamResponse
	27, // [27:38] is the sub-list for method output_type
	16, // [16:27] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_ark_v1_service_proto_init() }
func file_ark_v1_service_proto_init() {
	if File_ark_v1_service_proto != nil {
		return
	}
	file_ark_v1_types_proto_init()
	file_ark_v1_service_proto_msgTypes[15].OneofWrappers = []any{
		(*GetEventStreamResponse_BatchStarted)(nil),
		(*GetEventStreamResponse_BatchFinalization)(nil),
		(*GetEventStreamResponse_BatchFinalized)(nil),
		(*GetEventStreamResponse_BatchFailed)(nil),
		(*GetEventStreamResponse_TreeSigningStarted)(nil),
		(*GetEventStreamResponse_TreeNoncesAggregated)(nil),
		(*GetEventStreamResponse_TreeTx)(nil),
		(*GetEventStreamResponse_TreeSignature)(nil),
		(*GetEventStreamResponse_TreeNonces)(nil),
		(*GetEventStreamResponse_Heartbeat)(nil),
	}
	file_ark_v1_service_proto_msgTypes[21].OneofWrappers = []any{
		(*GetTransactionsStreamResponse_CommitmentTx)(nil),
		(*GetTransactionsStreamResponse_ArkTx)(nil),
		(*GetTransactionsStreamResponse_Heartbeat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ark_v1_service_proto_rawDesc), len(file_ark_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ark_v1_service_proto_goTypes,
		DependencyIndexes: file_ark_v1_service_proto_depIdxs,
		MessageInfos:      file_ark_v1_service_proto_msgTypes,
	}.Build()
	File_ark_v1_service_proto = out.File
	file_ark_v1_service_proto_goTypes = nil
	file_ark_v1_service_proto_depIdxs = nil
}
