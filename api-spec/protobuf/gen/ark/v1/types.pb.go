// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: ark/v1/types.proto

package arkv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Outpoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout          uint32                 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Outpoint) Reset() {
	*x = Outpoint{}
	mi := &file_ark_v1_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Outpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outpoint) ProtoMessage() {}

func (x *Outpoint) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outpoint.ProtoReflect.Descriptor instead.
func (*Outpoint) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *Outpoint) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *Outpoint) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

type Input struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Outpoint      *Outpoint              `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	TaprootTree   *Tapscripts            `protobuf:"bytes,2,opt,name=taproot_tree,json=taprootTree,proto3" json:"taproot_tree,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Input) Reset() {
	*x = Input{}
	mi := &file_ark_v1_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *Input) GetOutpoint() *Outpoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *Input) GetTaprootTree() *Tapscripts {
	if x != nil {
		return x.TaprootTree
	}
	return nil
}

type Vtxo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Outpoint        *Outpoint              `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	Amount          uint64                 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Script          string                 `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
	CreatedAt       int64                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExpiresAt       int64                  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CommitmentTxids []string               `protobuf:"bytes,6,rep,name=commitment_txids,json=commitmentTxids,proto3" json:"commitment_txids,omitempty"`
	IsPreconfirmed  bool                   `protobuf:"varint,7,opt,name=is_preconfirmed,json=isPreconfirmed,proto3" json:"is_preconfirmed,omitempty"`
	IsSwept         bool                   `protobuf:"varint,8,opt,name=is_swept,json=isSwept,proto3" json:"is_swept,omitempty"`
	IsUnrolled      bool                   `protobuf:"varint,9,opt,name=is_unrolled,json=isUnrolled,proto3" json:"is_unrolled,omitempty"`
	IsSpent         bool                   `protobuf:"varint,10,opt,name=is_spent,json=isSpent,proto3" json:"is_spent,omitempty"`
	SpentBy         string                 `protobuf:"bytes,11,opt,name=spent_by,json=spentBy,proto3" json:"spent_by,omitempty"`
	SettledBy       string                 `protobuf:"bytes,12,opt,name=settled_by,json=settledBy,proto3" json:"settled_by,omitempty"`
	ArkTxid         string                 `protobuf:"bytes,13,opt,name=ark_txid,json=arkTxid,proto3" json:"ark_txid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Vtxo) Reset() {
	*x = Vtxo{}
	mi := &file_ark_v1_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vtxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vtxo) ProtoMessage() {}

func (x *Vtxo) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vtxo.ProtoReflect.Descriptor instead.
func (*Vtxo) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *Vtxo) GetOutpoint() *Outpoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *Vtxo) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Vtxo) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *Vtxo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Vtxo) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *Vtxo) GetCommitmentTxids() []string {
	if x != nil {
		return x.CommitmentTxids
	}
	return nil
}

func (x *Vtxo) GetIsPreconfirmed() bool {
	if x != nil {
		return x.IsPreconfirmed
	}
	return false
}

func (x *Vtxo) GetIsSwept() bool {
	if x != nil {
		return x.IsSwept
	}
	return false
}

func (x *Vtxo) GetIsUnrolled() bool {
	if x != nil {
		return x.IsUnrolled
	}
	return false
}

func (x *Vtxo) GetIsSpent() bool {
	if x != nil {
		return x.IsSpent
	}
	return false
}

func (x *Vtxo) GetSpentBy() string {
	if x != nil {
		return x.SpentBy
	}
	return ""
}

func (x *Vtxo) GetSettledBy() string {
	if x != nil {
		return x.SettledBy
	}
	return ""
}

func (x *Vtxo) GetArkTxid() string {
	if x != nil {
		return x.ArkTxid
	}
	return ""
}

type TxData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Tx            string                 `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxData) Reset() {
	*x = TxData{}
	mi := &file_ark_v1_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxData) ProtoMessage() {}

func (x *TxData) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxData.ProtoReflect.Descriptor instead.
func (*TxData) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *TxData) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *TxData) GetTx() string {
	if x != nil {
		return x.Tx
	}
	return ""
}

type TxNotification struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Txid           string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Tx             string                 `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	SpentVtxos     []*Vtxo                `protobuf:"bytes,3,rep,name=spent_vtxos,json=spentVtxos,proto3" json:"spent_vtxos,omitempty"`
	SpendableVtxos []*Vtxo                `protobuf:"bytes,4,rep,name=spendable_vtxos,json=spendableVtxos,proto3" json:"spendable_vtxos,omitempty"`
	// This field is set only in case of offchain tx.
	CheckpointTxs map[string]*TxData `protobuf:"bytes,5,rep,name=checkpoint_txs,json=checkpointTxs,proto3" json:"checkpoint_txs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // key: outpoint, value: checkpoint txid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxNotification) Reset() {
	*x = TxNotification{}
	mi := &file_ark_v1_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxNotification) ProtoMessage() {}

func (x *TxNotification) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxNotification.ProtoReflect.Descriptor instead.
func (*TxNotification) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *TxNotification) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *TxNotification) GetTx() string {
	if x != nil {
		return x.Tx
	}
	return ""
}

func (x *TxNotification) GetSpentVtxos() []*Vtxo {
	if x != nil {
		return x.SpentVtxos
	}
	return nil
}

func (x *TxNotification) GetSpendableVtxos() []*Vtxo {
	if x != nil {
		return x.SpendableVtxos
	}
	return nil
}

func (x *TxNotification) GetCheckpointTxs() map[string]*TxData {
	if x != nil {
		return x.CheckpointTxs
	}
	return nil
}

type Tapscripts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scripts       []string               `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tapscripts) Reset() {
	*x = Tapscripts{}
	mi := &file_ark_v1_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tapscripts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tapscripts) ProtoMessage() {}

func (x *Tapscripts) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tapscripts.ProtoReflect.Descriptor instead.
func (*Tapscripts) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *Tapscripts) GetScripts() []string {
	if x != nil {
		return x.Scripts
	}
	return nil
}

type Intent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proof         string                 `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Intent) Reset() {
	*x = Intent{}
	mi := &file_ark_v1_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Intent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intent) ProtoMessage() {}

func (x *Intent) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intent.ProtoReflect.Descriptor instead.
func (*Intent) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *Intent) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *Intent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MarketHour struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NextStartTime int64                  `protobuf:"varint,1,opt,name=next_start_time,json=nextStartTime,proto3" json:"next_start_time,omitempty"`
	NextEndTime   int64                  `protobuf:"varint,2,opt,name=next_end_time,json=nextEndTime,proto3" json:"next_end_time,omitempty"`
	Period        int64                  `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	RoundInterval int64                  `protobuf:"varint,4,opt,name=round_interval,json=roundInterval,proto3" json:"round_interval,omitempty"`
	Fees          *FeeInfo               `protobuf:"bytes,5,opt,name=fees,proto3" json:"fees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketHour) Reset() {
	*x = MarketHour{}
	mi := &file_ark_v1_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketHour) ProtoMessage() {}

func (x *MarketHour) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketHour.ProtoReflect.Descriptor instead.
func (*MarketHour) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *MarketHour) GetNextStartTime() int64 {
	if x != nil {
		return x.NextStartTime
	}
	return 0
}

func (x *MarketHour) GetNextEndTime() int64 {
	if x != nil {
		return x.NextEndTime
	}
	return 0
}

func (x *MarketHour) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *MarketHour) GetRoundInterval() int64 {
	if x != nil {
		return x.RoundInterval
	}
	return 0
}

func (x *MarketHour) GetFees() *FeeInfo {
	if x != nil {
		return x.Fees
	}
	return nil
}

type FeeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IntentFee     *IntentFeeInfo         `protobuf:"bytes,1,opt,name=intent_fee,json=intentFee,proto3" json:"intent_fee,omitempty"`
	TxFeeRate     string                 `protobuf:"bytes,2,opt,name=tx_fee_rate,json=txFeeRate,proto3" json:"tx_fee_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeeInfo) Reset() {
	*x = FeeInfo{}
	mi := &file_ark_v1_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfo) ProtoMessage() {}

func (x *FeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfo.ProtoReflect.Descriptor instead.
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{8}
}

func (x *FeeInfo) GetIntentFee() *IntentFeeInfo {
	if x != nil {
		return x.IntentFee
	}
	return nil
}

func (x *FeeInfo) GetTxFeeRate() string {
	if x != nil {
		return x.TxFeeRate
	}
	return ""
}

type IntentFeeInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OffchainInput  string                 `protobuf:"bytes,1,opt,name=offchain_input,json=offchainInput,proto3" json:"offchain_input,omitempty"`
	OffchainOutput string                 `protobuf:"bytes,2,opt,name=offchain_output,json=offchainOutput,proto3" json:"offchain_output,omitempty"`
	OnchainInput   string                 `protobuf:"bytes,3,opt,name=onchain_input,json=onchainInput,proto3" json:"onchain_input,omitempty"`
	OnchainOutput  string                 `protobuf:"bytes,4,opt,name=onchain_output,json=onchainOutput,proto3" json:"onchain_output,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IntentFeeInfo) Reset() {
	*x = IntentFeeInfo{}
	mi := &file_ark_v1_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntentFeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentFeeInfo) ProtoMessage() {}

func (x *IntentFeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentFeeInfo.ProtoReflect.Descriptor instead.
func (*IntentFeeInfo) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{9}
}

func (x *IntentFeeInfo) GetOffchainInput() string {
	if x != nil {
		return x.OffchainInput
	}
	return ""
}

func (x *IntentFeeInfo) GetOffchainOutput() string {
	if x != nil {
		return x.OffchainOutput
	}
	return ""
}

func (x *IntentFeeInfo) GetOnchainInput() string {
	if x != nil {
		return x.OnchainInput
	}
	return ""
}

func (x *IntentFeeInfo) GetOnchainOutput() string {
	if x != nil {
		return x.OnchainOutput
	}
	return ""
}

type PendingTx struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ArkTxid             string                 `protobuf:"bytes,1,opt,name=ark_txid,json=arkTxid,proto3" json:"ark_txid,omitempty"`
	FinalArkTx          string                 `protobuf:"bytes,2,opt,name=final_ark_tx,json=finalArkTx,proto3" json:"final_ark_tx,omitempty"`
	SignedCheckpointTxs []string               `protobuf:"bytes,3,rep,name=signed_checkpoint_txs,json=signedCheckpointTxs,proto3" json:"signed_checkpoint_txs,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PendingTx) Reset() {
	*x = PendingTx{}
	mi := &file_ark_v1_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingTx) ProtoMessage() {}

func (x *PendingTx) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingTx.ProtoReflect.Descriptor instead.
func (*PendingTx) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{10}
}

func (x *PendingTx) GetArkTxid() string {
	if x != nil {
		return x.ArkTxid
	}
	return ""
}

func (x *PendingTx) GetFinalArkTx() string {
	if x != nil {
		return x.FinalArkTx
	}
	return ""
}

func (x *PendingTx) GetSignedCheckpointTxs() []string {
	if x != nil {
		return x.SignedCheckpointTxs
	}
	return nil
}

type DeprecatedSigner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pubkey        string                 `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	CutoffDate    int64                  `protobuf:"varint,2,opt,name=cutoff_date,json=cutoffDate,proto3" json:"cutoff_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeprecatedSigner) Reset() {
	*x = DeprecatedSigner{}
	mi := &file_ark_v1_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeprecatedSigner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedSigner) ProtoMessage() {}

func (x *DeprecatedSigner) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedSigner.ProtoReflect.Descriptor instead.
func (*DeprecatedSigner) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{11}
}

func (x *DeprecatedSigner) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *DeprecatedSigner) GetCutoffDate() int64 {
	if x != nil {
		return x.CutoffDate
	}
	return 0
}

type BatchStartedEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IntentIdHashes []string               `protobuf:"bytes,2,rep,name=intent_id_hashes,json=intentIdHashes,proto3" json:"intent_id_hashes,omitempty"`
	BatchExpiry    int64                  `protobuf:"varint,3,opt,name=batch_expiry,json=batchExpiry,proto3" json:"batch_expiry,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BatchStartedEvent) Reset() {
	*x = BatchStartedEvent{}
	mi := &file_ark_v1_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchStartedEvent) ProtoMessage() {}

func (x *BatchStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchStartedEvent.ProtoReflect.Descriptor instead.
func (*BatchStartedEvent) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{12}
}

func (x *BatchStartedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchStartedEvent) GetIntentIdHashes() []string {
	if x != nil {
		return x.IntentIdHashes
	}
	return nil
}

func (x *BatchStartedEvent) GetBatchExpiry() int64 {
	if x != nil {
		return x.BatchExpiry
	}
	return 0
}

type BatchFinalizationEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CommitmentTx  string                 `protobuf:"bytes,2,opt,name=commitment_tx,json=commitmentTx,proto3" json:"commitment_tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchFinalizationEvent) Reset() {
	*x = BatchFinalizationEvent{}
	mi := &file_ark_v1_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchFinalizationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFinalizationEvent) ProtoMessage() {}

func (x *BatchFinalizationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFinalizationEvent.ProtoReflect.Descriptor instead.
func (*BatchFinalizationEvent) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{13}
}

func (x *BatchFinalizationEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchFinalizationEvent) GetCommitmentTx() string {
	if x != nil {
		return x.CommitmentTx
	}
	return ""
}

type BatchFinalizedEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CommitmentTxid string                 `protobuf:"bytes,2,opt,name=commitment_txid,json=commitmentTxid,proto3" json:"commitment_txid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BatchFinalizedEvent) Reset() {
	*x = BatchFinalizedEvent{}
	mi := &file_ark_v1_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchFinalizedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFinalizedEvent) ProtoMessage() {}

func (x *BatchFinalizedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFinalizedEvent.ProtoReflect.Descriptor instead.
func (*BatchFinalizedEvent) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{14}
}

func (x *BatchFinalizedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchFinalizedEvent) GetCommitmentTxid() string {
	if x != nil {
		return x.CommitmentTxid
	}
	return ""
}

type BatchFailedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchFailedEvent) Reset() {
	*x = BatchFailedEvent{}
	mi := &file_ark_v1_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFailedEvent) ProtoMessage() {}

func (x *BatchFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFailedEvent.ProtoReflect.Descriptor instead.
func (*BatchFailedEvent) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{15}
}

func (x *BatchFailedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchFailedEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TreeSigningStartedEvent struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CosignersPubkeys     []string               `protobuf:"bytes,2,rep,name=cosigners_pubkeys,json=cosignersPubkeys,proto3" json:"cosigners_pubkeys,omitempty"`
	UnsignedCommitmentTx string                 `protobuf:"bytes,3,opt,name=unsigned_commitment_tx,json=unsignedCommitmentTx,proto3" json:"unsigned_commitment_tx,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TreeSigningStartedEvent) Reset() {
	*x = TreeSigningStartedEvent{}
	mi := &file_ark_v1_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeSigningStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeSigningStartedEvent) ProtoMessage() {}

func (x *TreeSigningStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeSigningStartedEvent.ProtoReflect.Descriptor instead.
func (*TreeSigningStartedEvent) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{16}
}

func (x *TreeSigningStartedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeSigningStartedEvent) GetCosignersPubkeys() []string {
	if x != nil {
		return x.CosignersPubkeys
	}
	return nil
}

func (x *TreeSigningStartedEvent) GetUnsignedCommitmentTx() string {
	if x != nil {
		return x.UnsignedCommitmentTx
	}
	return ""
}

type TreeNoncesAggregatedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TreeNonces    string                 `protobuf:"bytes,2,opt,name=tree_nonces,json=treeNonces,proto3" json:"tree_nonces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreeNoncesAggregatedEvent) Reset() {
	*x = TreeNoncesAggregatedEvent{}
	mi := &file_ark_v1_types_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeNoncesAggregatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNoncesAggregatedEvent) ProtoMessage() {}

func (x *TreeNoncesAggregatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNoncesAggregatedEvent.ProtoReflect.Descriptor instead.
func (*TreeNoncesAggregatedEvent) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{17}
}

func (x *TreeNoncesAggregatedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeNoncesAggregatedEvent) GetTreeNonces() string {
	if x != nil {
		return x.TreeNonces
	}
	return ""
}

type TreeNoncesEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic         []string               `protobuf:"bytes,2,rep,name=topic,proto3" json:"topic,omitempty"`
	Txid          string                 `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	Nonces        map[string]string      `protobuf:"bytes,4,rep,name=nonces,proto3" json:"nonces,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // pubkey -> musig2 public nonce
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreeNoncesEvent) Reset() {
	*x = TreeNoncesEvent{}
	mi := &file_ark_v1_types_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeNoncesEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNoncesEvent) ProtoMessage() {}

func (x *TreeNoncesEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNoncesEvent.ProtoReflect.Descriptor instead.
func (*TreeNoncesEvent) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{18}
}

func (x *TreeNoncesEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeNoncesEvent) GetTopic() []string {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *TreeNoncesEvent) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *TreeNoncesEvent) GetNonces() map[string]string {
	if x != nil {
		return x.Nonces
	}
	return nil
}

type TreeTxEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic         []string               `protobuf:"bytes,2,rep,name=topic,proto3" json:"topic,omitempty"`
	BatchIndex    int32                  `protobuf:"varint,3,opt,name=batch_index,json=batchIndex,proto3" json:"batch_index,omitempty"`
	Txid          string                 `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	Tx            string                 `protobuf:"bytes,5,opt,name=tx,proto3" json:"tx,omitempty"`
	Children      map[uint32]string      `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // output index -> child txid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreeTxEvent) Reset() {
	*x = TreeTxEvent{}
	mi := &file_ark_v1_types_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeTxEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeTxEvent) ProtoMessage() {}

func (x *TreeTxEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeTxEvent.ProtoReflect.Descriptor instead.
func (*TreeTxEvent) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{19}
}

func (x *TreeTxEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeTxEvent) GetTopic() []string {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *TreeTxEvent) GetBatchIndex() int32 {
	if x != nil {
		return x.BatchIndex
	}
	return 0
}

func (x *TreeTxEvent) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *TreeTxEvent) GetTx() string {
	if x != nil {
		return x.Tx
	}
	return ""
}

func (x *TreeTxEvent) GetChildren() map[uint32]string {
	if x != nil {
		return x.Children
	}
	return nil
}

type TreeSignatureEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic         []string               `protobuf:"bytes,2,rep,name=topic,proto3" json:"topic,omitempty"`
	BatchIndex    int32                  `protobuf:"varint,3,opt,name=batch_index,json=batchIndex,proto3" json:"batch_index,omitempty"`
	Txid          string                 `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	Signature     string                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreeSignatureEvent) Reset() {
	*x = TreeSignatureEvent{}
	mi := &file_ark_v1_types_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeSignatureEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeSignatureEvent) ProtoMessage() {}

func (x *TreeSignatureEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeSignatureEvent.ProtoReflect.Descriptor instead.
func (*TreeSignatureEvent) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{20}
}

func (x *TreeSignatureEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeSignatureEvent) GetTopic() []string {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *TreeSignatureEvent) GetBatchIndex() int32 {
	if x != nil {
		return x.BatchIndex
	}
	return 0
}

func (x *TreeSignatureEvent) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *TreeSignatureEvent) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type Heartbeat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_ark_v1_types_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{21}
}

type ErrorDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	mi := &file_ark_v1_types_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_types_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_ark_v1_types_proto_rawDescGZIP(), []int{22}
}

func (x *ErrorDetails) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ErrorDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorDetails) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_ark_v1_types_proto protoreflect.FileDescriptor

const file_ark_v1_types_proto_rawDesc = "" +
	"\n" +
	"\x12ark/v1/types.proto\x12\x06ark.v1\"2\n" +
	"\bOutpoint\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12\x12\n" +
	"\x04vout\x18\x02 \x01(\rR\x04vout\"l\n" +
	"\x05Input\x12,\n" +
	"\boutpoint\x18\x01 \x01(\v2\x10.ark.v1.OutpointR\boutpoint\x125\n" +
	"\ftaproot_tree\x18\x02 \x01(\v2\x12.ark.v1.TapscriptsR\vtaprootTree\"\xa2\x03\n" +
	"\x04Vtxo\x12,\n" +
	"\boutpoint\x18\x01 \x01(\v2\x10.ark.v1.OutpointR\boutpoint\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\x12\x16\n" +
	"\x06script\x18\x03 \x01(\tR\x06script\x12\x1d\n" +
	"\n" +
	"created_at\x18\x04 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x05 \x01(\x03R\texpiresAt\x12)\n" +
	"\x10commitment_txids\x18\x06 \x03(\tR\x0fcommitmentTxids\x12'\n" +
	"\x0fis_preconfirmed\x18\a \x01(\bR\x0eisPreconfirmed\x12\x19\n" +
	"\bis_swept\x18\b \x01(\bR\aisSwept\x12\x1f\n" +
	"\vis_unrolled\x18\t \x01(\bR\n" +
	"isUnrolled\x12\x19\n" +
	"\bis_spent\x18\n" +
	" \x01(\bR\aisSpent\x12\x19\n" +
	"\bspent_by\x18\v \x01(\tR\aspentBy\x12\x1d\n" +
	"\n" +
	"settled_by\x18\f \x01(\tR\tsettledBy\x12\x19\n" +
	"\bark_txid\x18\r \x01(\tR\aarkTxid\",\n" +
	"\x06TxData\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12\x0e\n" +
	"\x02tx\x18\x02 \x01(\tR\x02tx\"\xbe\x02\n" +
	"\x0eTxNotification\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12\x0e\n" +
	"\x02tx\x18\x02 \x01(\tR\x02tx\x12-\n" +
	"\vspent_vtxos\x18\x03 \x03(\v2\f.ark.v1.VtxoR\n" +
	"spentVtxos\x125\n" +
	"\x0fspendable_vtxos\x18\x04 \x03(\v2\f.ark.v1.VtxoR\x0espendableVtxos\x12P\n" +
	"\x0echeckpoint_txs\x18\x05 \x03(\v2).ark.v1.TxNotification.CheckpointTxsEntryR\rcheckpointTxs\x1aP\n" +
	"\x12CheckpointTxsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.ark.v1.TxDataR\x05value:\x028\x01\"&\n" +
	"\n" +
	"Tapscripts\x12\x18\n" +
	"\ascripts\x18\x01 \x03(\tR\ascripts\"8\n" +
	"\x06Intent\x12\x14\n" +
	"\x05proof\x18\x01 \x01(\tR\x05proof\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xbc\x01\n" +
	"\n" +
	"MarketHour\x12&\n" +
	"\x0fnext_start_time\x18\x01 \x01(\x03R\rnextStartTime\x12\"\n" +
	"\rnext_end_time\x18\x02 \x01(\x03R\vnextEndTime\x12\x16\n" +
	"\x06period\x18\x03 \x01(\x03R\x06period\x12%\n" +
	"\x0eround_interval\x18\x04 \x01(\x03R\rroundInterval\x12#\n" +
	"\x04fees\x18\x05 \x01(\v2\x0f.ark.v1.FeeInfoR\x04fees\"_\n" +
	"\aFeeInfo\x124\n" +
	"\n" +
	"intent_fee\x18\x01 \x01(\v2\x15.ark.v1.IntentFeeInfoR\tintentFee\x12\x1e\n" +
	"\vtx_fee_rate\x18\x02 \x01(\tR\ttxFeeRate\"\xab\x01\n" +
	"\rIntentFeeInfo\x12%\n" +
	"\x0eoffchain_input\x18\x01 \x01(\tR\roffchainInput\x12'\n" +
	"\x0foffchain_output\x18\x02 \x01(\tR\x0eoffchainOutput\x12#\n" +
	"\ronchain_input\x18\x03 \x01(\tR\fonchainInput\x12%\n" +
	"\x0eonchain_output\x18\x04 \x01(\tR\ronchainOutput\"|\n" +
	"\tPendingTx\x12\x19\n" +
	"\bark_txid\x18\x01 \x01(\tR\aarkTxid\x12 \n" +
	"\ffinal_ark_tx\x18\x02 \x01(\tR\n" +
	"finalArkTx\x122\n" +
	"\x15signed_checkpoint_txs\x18\x03 \x03(\tR\x13signedCheckpointTxs\"K\n" +
	"\x10DeprecatedSigner\x12\x16\n" +
	"\x06pubkey\x18\x01 \x01(\tR\x06pubkey\x12\x1f\n" +
	"\vcutoff_date\x18\x02 \x01(\x03R\n" +
	"cutoffDate\"p\n" +
	"\x11BatchStartedEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12(\n" +
	"\x10intent_id_hashes\x18\x02 \x03(\tR\x0eintentIdHashes\x12!\n" +
	"\fbatch_expiry\x18\x03 \x01(\x03R\vbatchExpiry\"M\n" +
	"\x16BatchFinalizationEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12#\n" +
	"\rcommitment_tx\x18\x02 \x01(\tR\fcommitmentTx\"N\n" +
	"\x13BatchFinalizedEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x0fcommitment_txid\x18\x02 \x01(\tR\x0ecommitmentTxid\":\n" +
	"\x10BatchFailedEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"\x8c\x01\n" +
	"\x17TreeSigningStartedEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12+\n" +
	"\x11cosigners_pubkeys\x18\x02 \x03(\tR\x10cosignersPubkeys\x124\n" +
	"\x16unsigned_commitment_tx\x18\x03 \x01(\tR\x14unsignedCommitmentTx\"L\n" +
	"\x19TreeNoncesAggregatedEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\vtree_nonces\x18\x02 \x01(\tR\n" +
	"treeNonces\"\xc3\x01\n" +
	"\x0fTreeNoncesEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05topic\x18\x02 \x03(\tR\x05topic\x12\x12\n" +
	"\x04txid\x18\x03 \x01(\tR\x04txid\x12;\n" +
	"\x06nonces\x18\x04 \x03(\v2#.ark.v1.TreeNoncesEvent.NoncesEntryR\x06nonces\x1a9\n" +
	"\vNoncesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf4\x01\n" +
	"\vTreeTxEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05topic\x18\x02 \x03(\tR\x05topic\x12\x1f\n" +
	"\vbatch_index\x18\x03 \x01(\x05R\n" +
	"batchIndex\x12\x12\n" +
	"\x04txid\x18\x04 \x01(\tR\x04txid\x12\x0e\n" +
	"\x02tx\x18\x05 \x01(\tR\x02tx\x12=\n" +
	"\bchildren\x18\x06 \x03(\v2!.ark.v1.TreeTxEvent.ChildrenEntryR\bchildren\x1a;\n" +
	"\rChildrenEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8d\x01\n" +
	"\x12TreeSignatureEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05topic\x18\x02 \x03(\tR\x05topic\x12\x1f\n" +
	"\vbatch_index\x18\x03 \x01(\x05R\n" +
	"batchIndex\x12\x12\n" +
	"\x04txid\x18\x04 \x01(\tR\x04txid\x12\x1c\n" +
	"\tsignature\x18\x05 \x01(\tR\tsignature\"\v\n" +
	"\tHeartbeat\"\xcd\x01\n" +
	"\fErrorDetails\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12>\n" +
	"\bmetadata\x18\x04 \x03(\v2\".ark.v1.ErrorDetails.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x91\x01\n" +
	"\n" +
	"com.ark.v1B\n" +
	"TypesProtoP\x01Z>github.com/arkade-os/go-sdk/api-spec/protobuf/gen/ark/v1;arkv1\xa2\x02\x03AXX\xaa\x02\x06Ark.V1\xca\x02\x06Ark\\V1\xe2\x02\x12Ark\\V1\\GPBMetadata\xea\x02\aArk::V1b\x06proto3"

var (
	file_ark_v1_types_proto_rawDescOnce sync.Once
	file_ark_v1_types_proto_rawDescData []byte
)

func file_ark_v1_types_proto_rawDescGZIP() []byte {
	file_ark_v1_types_proto_rawDescOnce.Do(func() {
		file_ark_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ark_v1_types_proto_rawDesc), len(file_ark_v1_types_proto_rawDesc)))
	})
	return file_ark_v1_types_proto_rawDescData
}

var file_ark_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_ark_v1_types_proto_goTypes = []any{
	(*Outpoint)(nil),                  // 0: ark.v1.Outpoint
	(*Input)(nil),                     // 1: ark.v1.Input
	(*Vtxo)(nil),                      // 2: ark.v1.Vtxo
	(*TxData)(nil),                    // 3: ark.v1.TxData
	(*TxNotification)(nil),            // 4: ark.v1.TxNotification
	(*Tapscripts)(nil),                // 5: ark.v1.Tapscripts
	(*Intent)(nil),                    // 6: ark.v1.Intent
	(*MarketHour)(nil),                // 7: ark.v1.MarketHour
	(*FeeInfo)(nil),                   // 8: ark.v1.FeeInfo
	(*IntentFeeInfo)(nil),             // 9: ark.v1.IntentFeeInfo
	(*PendingTx)(nil),                 // 10: ark.v1.PendingTx
	(*DeprecatedSigner)(nil),          // 11: ark.v1.DeprecatedSigner
	(*BatchStartedEvent)(nil),         // 12: ark.v1.BatchStartedEvent
	(*BatchFinalizationEvent)(nil),    // 13: ark.v1.BatchFinalizationEvent
	(*BatchFinalizedEvent)(nil),       // 14: ark.v1.BatchFinalizedEvent
	(*BatchFailedEvent)(nil),          // 15: ark.v1.BatchFailedEvent
	(*TreeSigningStartedEvent)(nil),   // 16: ark.v1.TreeSigningStartedEvent
	(*TreeNoncesAggregatedEvent)(nil), // 17: ark.v1.TreeNoncesAggregatedEvent
	(*TreeNoncesEvent)(nil),           // 18: ark.v1.TreeNoncesEvent
	(*TreeTxEvent)(nil),               // 19: ark.v1.TreeTxEvent
	(*TreeSignatureEvent)(nil),        // 20: ark.v1.TreeSignatureEvent
	(*Heartbeat)(nil),                 // 21: ark.v1.Heartbeat
	(*ErrorDetails)(nil),              // 22: ark.v1.ErrorDetails
	nil,                               // 23: ark.v1.TxNotification.CheckpointTxsEntry
	nil,                               // 24: ark.v1.TreeNoncesEvent.NoncesEntry
	nil,                               // 25: ark.v1.TreeTxEvent.ChildrenEntry
	nil,                               // 26: ark.v1.ErrorDetails.MetadataEntry
}
var file_ark_v1_types_proto_depIdxs = []int32{
	0,  // 0: ark.v1.Input.outpoint:type_name -> ark.v1.Outpoint
	5,  // 1: ark.v1.Input.taproot_tree:type_name -> ark.v1.Tapscripts
	0,  // 2: ark.v1.Vtxo.outpoint:type_name -> ark.v1.Outpoint
	2,  // 3: ark.v1.TxNotification.spent_vtxos:type_name -> ark.v1.Vtxo
	2,  // 4: ark.v1.TxNotification.spendable_vtxos:type_name -> ark.v1.Vtxo
	23, // 5: ark.v1.TxNotification.checkpoint_txs:type_name -> ark.v1.TxNotification.CheckpointTxsEntry
	8,  // 6: ark.v1.MarketHour.fees:type_name -> ark.v1.FeeInfo
	9,  // 7: ark.v1.FeeInfo.intent_fee:type_name -> ark.v1.IntentFeeInfo
	24, // 8: ark.v1.TreeNoncesEvent.nonces:type_name -> ark.v1.TreeNoncesEvent.NoncesEntry
	25, // 9: ark.v1.TreeTxEvent.children:type_name -> ark.v1.TreeTxEvent.ChildrenEntry
	26, // 10: ark.v1.ErrorDetails.metadata:type_name -> ark.v1.ErrorDetails.MetadataEntry
	3,  // 11: ark.v1.TxNotification.CheckpointTxsEntry.value:type_name -> ark.v1.TxData
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_ark_v1_types_proto_init() }
func file_ark_v1_types_proto_init() {
	if File_ark_v1_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ark_v1_types_proto_rawDesc), len(file_ark_v1_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ark_v1_types_proto_goTypes,
		DependencyIndexes: file_ark_v1_types_proto_depIdxs,
		MessageInfos:      file_ark_v1_types_proto_msgTypes,
	}.Build()
	File_ark_v1_types_proto = out.File
	file_ark_v1_types_proto_goTypes = nil
	file_ark_v1_types_proto_depIdxs = nil
}
